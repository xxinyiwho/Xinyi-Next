{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\n\n/**\n * Google Maps Circle\n * Creates or encodes a Circle for use on a Google Map\n *\n * @see https://developers.google.com/maps/documentation/javascript/shapes#circles\n * @see https://developers.google.com/maps/documentation/javascript/examples/circle-simple\n *\n * @see https://stackoverflow.com/questions/36506668/google-static-map-draw-a-circle\n * @see https://stackoverflow.com/questions/7316963/drawing-a-circle-google-static-maps\n */\nfunction locationBuilder(location) {\n  const urlParts = [];\n\n  if (_Array$isArray(location)) {\n    const arrParts = location.map(val => this.locationBuilder(val));\n    urlParts.push(...arrParts);\n  }\n\n  if (typeof location === 'string' || typeof location === 'number') {\n    urlParts.push(location);\n  }\n\n  if (typeof location === 'object' && location.lat && location.lng) {\n    urlParts.push(`${location.lat},${location.lng}`);\n  }\n\n  return urlParts.join('%7C');\n}\n\nfunction GMapCircle(lat, lng, rad, detail = 8) {\n  const r = 6371;\n  const pi = Math.PI;\n  let staticMapSrc = '';\n\n  const _lat = lat * pi / 180;\n\n  const _lng = lng * pi / 180;\n\n  const d = rad / 1000 / r;\n  let i = 0;\n\n  for (i = 0; i <= 360; i += detail) {\n    const brng = i * pi / 180;\n    let pLat = Math.asin(Math.sin(_lat) * Math.cos(d) + Math.cos(_lat) * Math.sin(d) * Math.cos(brng));\n    const pLng = (_lng + Math.atan2(Math.sin(brng) * Math.sin(d) * Math.cos(_lat), Math.cos(d) - Math.sin(_lat) * Math.sin(pLat))) * 180 / pi;\n    pLat = pLat * 180 / pi;\n    staticMapSrc += locationBuilder(pLat + ',' + pLng); // staticMapSrc += '|' + pLat + ',' + pLng\n  }\n\n  return encodeURI(staticMapSrc);\n}\n\nexport function encodeCircle(latitude, longitude, radius) {\n  const circle = GMapCircle(latitude, longitude, radius);\n  return circle;\n}","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/services/google/static/circle.js"],"names":["locationBuilder","location","urlParts","arrParts","map","val","push","lat","lng","join","GMapCircle","rad","detail","r","pi","Math","PI","staticMapSrc","_lat","_lng","d","i","brng","pLat","asin","sin","cos","pLng","atan2","encodeURI","encodeCircle","latitude","longitude","radius","circle"],"mappings":";;AAAA;;;;;;;;;;AAWA,SAASA,eAAT,CAA0BC,QAA1B,EAAoC;AAClC,QAAMC,QAAQ,GAAG,EAAjB;;AAEA,MAAI,eAAcD,QAAd,CAAJ,EAA6B;AAC3B,UAAME,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CAAaC,GAAG,IAAI,KAAKL,eAAL,CAAqBK,GAArB,CAApB,CAAjB;AACAH,IAAAA,QAAQ,CAACI,IAAT,CAAc,GAAGH,QAAjB;AACD;;AAED,MAAI,OAAOF,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;AAChEC,IAAAA,QAAQ,CAACI,IAAT,CAAcL,QAAd;AACD;;AAED,MAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,CAACM,GAAzC,IAAgDN,QAAQ,CAACO,GAA7D,EAAkE;AAChEN,IAAAA,QAAQ,CAACI,IAAT,CAAe,GAAEL,QAAQ,CAACM,GAAI,IAAGN,QAAQ,CAACO,GAAI,EAA9C;AACD;;AAED,SAAON,QAAQ,CAACO,IAAT,CAAc,KAAd,CAAP;AACD;;AAED,SAASC,UAAT,CAAqBH,GAArB,EAA0BC,GAA1B,EAA+BG,GAA/B,EAAoCC,MAAM,GAAG,CAA7C,EAAgD;AAC9C,QAAMC,CAAC,GAAG,IAAV;AACA,QAAMC,EAAE,GAAGC,IAAI,CAACC,EAAhB;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,QAAMC,IAAI,GAAIX,GAAG,GAAGO,EAAP,GAAa,GAA1B;;AACA,QAAMK,IAAI,GAAIX,GAAG,GAAGM,EAAP,GAAa,GAA1B;;AACA,QAAMM,CAAC,GAAGT,GAAG,GAAG,IAAN,GAAaE,CAAvB;AAEA,MAAIQ,CAAC,GAAG,CAAR;;AAEA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAI,GAAjB,EAAsBA,CAAC,IAAIT,MAA3B,EAAmC;AACjC,UAAMU,IAAI,GAAID,CAAC,GAAGP,EAAL,GAAW,GAAxB;AAEA,QAAIS,IAAI,GAAGR,IAAI,CAACS,IAAL,CACTT,IAAI,CAACU,GAAL,CAASP,IAAT,IAAiBH,IAAI,CAACW,GAAL,CAASN,CAAT,CAAjB,GAA+BL,IAAI,CAACW,GAAL,CAASR,IAAT,IAAiBH,IAAI,CAACU,GAAL,CAASL,CAAT,CAAjB,GAA+BL,IAAI,CAACW,GAAL,CAASJ,IAAT,CADrD,CAAX;AAGA,UAAMK,IAAI,GACP,CAACR,IAAI,GACJJ,IAAI,CAACa,KAAL,CACEb,IAAI,CAACU,GAAL,CAASH,IAAT,IAAiBP,IAAI,CAACU,GAAL,CAASL,CAAT,CAAjB,GAA+BL,IAAI,CAACW,GAAL,CAASR,IAAT,CADjC,EAEEH,IAAI,CAACW,GAAL,CAASN,CAAT,IAAcL,IAAI,CAACU,GAAL,CAASP,IAAT,IAAiBH,IAAI,CAACU,GAAL,CAASF,IAAT,CAFjC,CADD,IAKC,GALF,GAMAT,EAPF;AAQAS,IAAAA,IAAI,GAAIA,IAAI,GAAG,GAAR,GAAeT,EAAtB;AAEAG,IAAAA,YAAY,IAAIjB,eAAe,CAACuB,IAAI,GAAG,GAAP,GAAaI,IAAd,CAA/B,CAhBiC,CAiBjC;AACD;;AAED,SAAOE,SAAS,CAACZ,YAAD,CAAhB;AACD;;AAED,OAAO,SAASa,YAAT,CAAuBC,QAAvB,EAAiCC,SAAjC,EAA4CC,MAA5C,EAAoD;AACzD,QAAMC,MAAM,GAAGxB,UAAU,CAACqB,QAAD,EAAWC,SAAX,EAAsBC,MAAtB,CAAzB;AACA,SAAOC,MAAP;AACD","sourcesContent":["/**\n * Google Maps Circle\n * Creates or encodes a Circle for use on a Google Map\n *\n * @see https://developers.google.com/maps/documentation/javascript/shapes#circles\n * @see https://developers.google.com/maps/documentation/javascript/examples/circle-simple\n *\n * @see https://stackoverflow.com/questions/36506668/google-static-map-draw-a-circle\n * @see https://stackoverflow.com/questions/7316963/drawing-a-circle-google-static-maps\n */\n\nfunction locationBuilder (location) {\n  const urlParts = []\n\n  if (Array.isArray(location)) {\n    const arrParts = location.map(val => this.locationBuilder(val))\n    urlParts.push(...arrParts)\n  }\n\n  if (typeof location === 'string' || typeof location === 'number') {\n    urlParts.push(location)\n  }\n\n  if (typeof location === 'object' && location.lat && location.lng) {\n    urlParts.push(`${location.lat},${location.lng}`)\n  }\n\n  return urlParts.join('%7C')\n}\n\nfunction GMapCircle (lat, lng, rad, detail = 8) {\n  const r = 6371\n  const pi = Math.PI\n  let staticMapSrc = ''\n\n  const _lat = (lat * pi) / 180\n  const _lng = (lng * pi) / 180\n  const d = rad / 1000 / r\n\n  let i = 0\n\n  for (i = 0; i <= 360; i += detail) {\n    const brng = (i * pi) / 180\n\n    let pLat = Math.asin(\n      Math.sin(_lat) * Math.cos(d) + Math.cos(_lat) * Math.sin(d) * Math.cos(brng)\n    )\n    const pLng =\n      ((_lng +\n        Math.atan2(\n          Math.sin(brng) * Math.sin(d) * Math.cos(_lat),\n          Math.cos(d) - Math.sin(_lat) * Math.sin(pLat)\n        )) *\n        180) /\n      pi\n    pLat = (pLat * 180) / pi\n\n    staticMapSrc += locationBuilder(pLat + ',' + pLng)\n    // staticMapSrc += '|' + pLat + ',' + pLng\n  }\n\n  return encodeURI(staticMapSrc)\n}\n\nexport function encodeCircle (latitude, longitude, radius) {\n  const circle = GMapCircle(latitude, longitude, radius)\n  return circle\n}\n"]},"metadata":{},"sourceType":"module"}