{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/atoms/form/reactSelect/components/ReactSelect.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * React Select\n * Utilises the select component\n *\n * @see https://github.com/JedWatson/react-select\n */\n// React\nimport { array, bool, func, string, number, object, oneOf, oneOfType } from 'prop-types'; // UI\n\nimport Select from 'react-select';\nimport { Label } from \"../../\";\nvar defaultStyles = {\n  container: function container(base, state) {\n    return _objectSpread({}, base, {\n      margin: '0'\n    });\n  },\n  control: function control(base, state) {\n    return _objectSpread({}, base, {\n      padding: '.315rem .75rem',\n      backgroundColor: '#fff',\n      border: '1px solid #c4cacf',\n      borderRadius: '0.25rem',\n      color: '#9da7af',\n      fontSize: '1rem',\n      height: '3rem',\n      lineHeight: 1.5\n    });\n  },\n  menu: function menu(base, state) {\n    return _objectSpread({}, base, {\n      borderColor: '#80bdff',\n      boxShadow: '0 0 0 0.2rem rgba(0, 123, 255, 0.25)',\n      color: '#9da7af'\n    });\n  },\n  multiValue: function multiValue(base, state) {\n    return state.data.isFixed ? _objectSpread({}, base, {\n      backgroundColor: 'gray'\n    }) : base;\n  },\n  multiValueLabel: function multiValueLabel(base, state) {\n    return state.data.isFixed ? _objectSpread({}, base, {\n      fontWeight: 'bold',\n      color: 'white',\n      paddingRight: 6\n    }) : base;\n  },\n  multiValueRemove: function multiValueRemove(base, state) {\n    return state.data.isFixed ? _objectSpread({}, base, {\n      display: 'none'\n    }) : base;\n  }\n};\nexport var ReactSelect = function ReactSelect(_ref) {\n  var change = _ref.change,\n      className = _ref.className,\n      defaultValue = _ref.defaultValue,\n      id = _ref.id,\n      isMulti = _ref.isMulti,\n      label = _ref.label,\n      options = _ref.options,\n      placeholder = _ref.placeholder,\n      selectedOption = _ref.selectedOption,\n      props = _objectWithoutProperties(_ref, [\"change\", \"className\", \"defaultValue\", \"id\", \"isMulti\", \"label\", \"options\", \"placeholder\", \"selectedOption\"]);\n\n  var handleChange = function handleChange(option) {\n    change({\n      target: {\n        checked: false,\n        id: id,\n        type: 'select',\n        value: option,\n        label: option ? option.label : ''\n      }\n    });\n  };\n\n  return __jsx(Label, {\n    id: id,\n    text: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(Select, _extends({\n    className: className,\n    defaultValue: defaultValue,\n    isMulti: isMulti,\n    name: id,\n    onChange: handleChange,\n    options: options,\n    placeholder: placeholder,\n    value: selectedOption\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })));\n};\nReactSelect.propTypes = {\n  /**\n   * Focus the control when it is mounted\n   */\n  autoFocus: bool,\n\n  /**\n   * Remove the currently focused option when the user presses backspace\n   */\n  backspaceRemovesValue: bool,\n\n  /**\n   * Remove focus from the input when the user selects an option (handy for dismissing the keyboard on touch devices)\n   */\n  blurInputOnSelect: bool,\n\n  /**\n   * When the user reaches the top/bottom of the menu, prevent scroll on the scroll-parent\n   */\n  captureMenuScroll: bool,\n\n  /**\n   * Close the select menu when the user selects an option\n   */\n  closeMenuOnSelect: bool,\n\n  /**\n   * Handle change events on the select\n   */\n  change: func.isRequired,\n\n  /**\n   * If `true`, close the select menu when the user scrolls the document/body.\n     If a function, takes a standard javascript `ScrollEvent` you return a boolean:\n      `true` => The menu closes\n      `false` => The menu stays open\n     This is useful when you have a scrollable modal and want to portal the menu out,\n     but want to avoid graphical issues.\n   */\n  closeMenuOnScroll: oneOfType([bool, func]),\n\n  /**\n   * This complex object includes all the compositional components that are used\n     in `react-select`. If you wish to overwrite a component, pass in an object\n     with the appropriate namespace.\n     If you only wish to restyle a component, we recommend using the `styles` prop\n     instead. For a list of the components that can be passed in, and the shape\n     that will be passed to them, see [the components docs](/components)\n   */\n  components: object,\n\n  /**\n   * Whether the value of the select, e.g. SingleValue, should be displayed in the control.\n   */\n  controlShouldRenderValue: bool,\n  defaultValue: oneOfType([array, object]),\n\n  /**\n   * Delimiter used to join multiple values into a single HTML Input value\n   */\n  delimiter: string,\n\n  /**\n   * Clear all values when the user presses escape AND the menu is closed\n   */\n  escapeClearsValue: bool,\n\n  /**\n   * Hide the selected option from the menu\n   */\n  hideSelectedOptions: bool,\n\n  /**\n   * The id to set on the SelectContainer component\n   */\n  id: string,\n\n  /**\n   * The id of the search input\n   */\n  inputId: string,\n\n  /**\n   * Define an id prefix for the select components e.g. {your-id}-value\n   */\n  instanceId: oneOfType([number, string]),\n\n  /**\n   * Is the select value clearable\n   */\n  isClearable: bool,\n\n  /**\n   * Is the select disabled\n   */\n  isDisabled: bool,\n\n  /**\n   * Is the select in a state of loading (async)\n   */\n  isLoading: bool,\n\n  /**\n   * Support multiple selected options\n   */\n  isMulti: bool,\n\n  /**\n   * Is the select direction right-to-left\n   */\n  isRtl: bool,\n\n  /**\n   * Whether to enable search functionality\n   */\n  isSearchable: bool,\n\n  /**\n   * Label text\n   */\n  label: string,\n\n  /**\n   * Async: Text to display when loading options\n   */\n  loadingMessage: func,\n\n  /**\n   * Minimum height of the menu before flipping\n   */\n  minMenuHeight: number,\n\n  /**\n   * Maximum height of the menu before scrolling\n   */\n  maxMenuHeight: number,\n\n  /**\n   * Whether the menu is open\n   */\n  menuIsOpen: bool,\n\n  /**\n   * Default placement of the menu in relation to the control. 'auto' will flip\n     when there isn't enough space below the control.\n   */\n  menuPlacement: oneOf(['auto', 'bottom', 'top']),\n\n  /**\n   * The CSS position value of the menu, when \"fixed\" extra layout management is required\n   */\n  menuPosition: oneOf(['absolute', 'fixed']),\n\n  /**\n   * Whether to block scroll events when the menu is open\n   */\n  menuShouldBlockScroll: bool,\n\n  /**\n   * Whether the menu should be scrolled into view when it opens\n   */\n  menuShouldScrollIntoView: bool,\n\n  /**\n   * Text to display when there are no options\n   */\n  noOptionsMessage: func,\n\n  /**\n   * Handle blur events on the control\n   */\n  onBlur: func,\n\n  /**\n   * Handle focus events on the control\n   */\n  onFocus: func,\n\n  /**\n   * Handle key down events on the select\n   */\n  onKeyDown: func,\n\n  /**\n   * Handle the menu opening\n   */\n  onMenuOpen: func,\n\n  /**\n   * Handle the menu closing\n   */\n  onMenuClose: func,\n\n  /**\n   * Fired when the user scrolls to the top of the menu\n   */\n  onMenuScrollToTop: func,\n\n  /**\n   * Fired when the user scrolls to the bottom of the menu\n   */\n  onMenuScrollToBottom: func,\n\n  /**\n   * Allows control of whether the menu is opened when the Select is focused\n   */\n  openMenuOnFocus: bool,\n\n  /**\n   * Allows control of whether the menu is opened when the Select is clicked\n   */\n  openMenuOnClick: bool,\n\n  /**\n   * Array of options that populate the select menu\n   */\n  options: array.isRequired,\n\n  /**\n   * Number of options to jump in menu when page{up|down} keys are used\n   */\n  pageSize: number,\n\n  /**\n   * Placeholder for the select value\n   */\n  placeholder: string,\n\n  /**\n   * Status to relay to screen readers\n   */\n  screenReaderStatus: func,\n\n  /**\n   * The value of the select; reflected by the selected option\n   */\n  selectedOption: oneOfType([array, object]),\n\n  /**\n   * Sets the tabIndex attribute on the input\n   */\n  tabIndex: string,\n\n  /**\n   * Select the currently focused option when the user presses tab\n   */\n  tabSelectsValue: bool\n};\nReactSelect.defaultProps = {\n  backspaceRemovesValue: true,\n  closeMenuOnSelect: true,\n  closeMenuOnScroll: false,\n  components: {},\n  controlShouldRenderValue: true,\n  escapeClearsValue: false,\n  isDisabled: false,\n  isLoading: false,\n  isMulti: false,\n  isRtl: false,\n  isSearchable: true,\n  loadingMessage: function loadingMessage() {\n    return 'Loading...';\n  },\n  maxMenuHeight: 300,\n  minMenuHeight: 140,\n  menuPlacement: 'bottom',\n  menuPosition: 'absolute',\n  menuShouldBlockScroll: false,\n  noOptionsMessage: function noOptionsMessage() {\n    return 'No options';\n  },\n  openMenuOnFocus: false,\n  openMenuOnClick: true,\n  options: [],\n  pageSize: 5,\n  placeholder: 'Select...',\n  screenReaderStatus: function screenReaderStatus(_ref2) {\n    var count = _ref2.count;\n    return \"\".concat(count, \" result\").concat(count !== 1 ? 's' : '', \" available\");\n  },\n  styles: defaultStyles,\n  tabIndex: '0',\n  tabSelectsValue: true\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/atoms/form/reactSelect/components/ReactSelect.js"],"names":["array","bool","func","string","number","object","oneOf","oneOfType","Select","Label","defaultStyles","container","base","state","margin","control","padding","backgroundColor","border","borderRadius","color","fontSize","height","lineHeight","menu","borderColor","boxShadow","multiValue","data","isFixed","multiValueLabel","fontWeight","paddingRight","multiValueRemove","display","ReactSelect","change","className","defaultValue","id","isMulti","label","options","placeholder","selectedOption","props","handleChange","option","target","checked","type","value","propTypes","autoFocus","backspaceRemovesValue","blurInputOnSelect","captureMenuScroll","closeMenuOnSelect","isRequired","closeMenuOnScroll","components","controlShouldRenderValue","delimiter","escapeClearsValue","hideSelectedOptions","inputId","instanceId","isClearable","isDisabled","isLoading","isRtl","isSearchable","loadingMessage","minMenuHeight","maxMenuHeight","menuIsOpen","menuPlacement","menuPosition","menuShouldBlockScroll","menuShouldScrollIntoView","noOptionsMessage","onBlur","onFocus","onKeyDown","onMenuOpen","onMenuClose","onMenuScrollToTop","onMenuScrollToBottom","openMenuOnFocus","openMenuOnClick","pageSize","screenReaderStatus","tabIndex","tabSelectsValue","defaultProps","count","styles"],"mappings":"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","sourcesContent":["/**\n * React Select\n * Utilises the select component\n *\n * @see https://github.com/JedWatson/react-select\n */\n\n// React\nimport { array, bool, func, string, number, object, oneOf, oneOfType } from 'prop-types'\n\n// UI\nimport Select from 'react-select'\nimport { Label } from '../../'\n\nconst defaultStyles = {\n  container: (base, state) => {\n    return { ...base, margin: '0' }\n  },\n\n  control: (base, state) => {\n    return {\n      ...base,\n      padding: '.315rem .75rem',\n      backgroundColor: '#fff',\n      border: '1px solid #c4cacf',\n      borderRadius: '0.25rem',\n      color: '#9da7af',\n      fontSize: '1rem',\n      height: '3rem',\n      lineHeight: 1.5\n    }\n  },\n\n  menu: (base, state) => {\n    return {\n      ...base,\n      borderColor: '#80bdff',\n      boxShadow: '0 0 0 0.2rem rgba(0, 123, 255, 0.25)',\n      color: '#9da7af'\n    }\n  },\n\n  multiValue: (base, state) => {\n    return state.data.isFixed ? { ...base, backgroundColor: 'gray' } : base\n  },\n\n  multiValueLabel: (base, state) => {\n    return state.data.isFixed\n      ? { ...base, fontWeight: 'bold', color: 'white', paddingRight: 6 }\n      : base\n  },\n\n  multiValueRemove: (base, state) => {\n    return state.data.isFixed ? { ...base, display: 'none' } : base\n  }\n}\n\nexport const ReactSelect = ({\n  change,\n  className,\n  defaultValue,\n  id,\n  isMulti,\n  label,\n  options,\n  placeholder,\n  selectedOption,\n  ...props\n}) => {\n  const handleChange = option => {\n    change({\n      target: {\n        checked: false,\n        id,\n        type: 'select',\n        value: option,\n        label: option ? option.label : ''\n      }\n    })\n  }\n\n  return (\n    <Label id={id} text={label}>\n      <Select\n        className={className}\n        defaultValue={defaultValue}\n        isMulti={isMulti}\n        name={id}\n        onChange={handleChange}\n        options={options}\n        placeholder={placeholder}\n        value={selectedOption}\n        {...props}\n      />\n    </Label>\n  )\n}\n\nReactSelect.propTypes = {\n  /**\n   * Focus the control when it is mounted\n   */\n  autoFocus: bool,\n  /**\n   * Remove the currently focused option when the user presses backspace\n   */\n  backspaceRemovesValue: bool,\n  /**\n   * Remove focus from the input when the user selects an option (handy for dismissing the keyboard on touch devices)\n   */\n  blurInputOnSelect: bool,\n  /**\n   * When the user reaches the top/bottom of the menu, prevent scroll on the scroll-parent\n   */\n  captureMenuScroll: bool,\n  /**\n   * Close the select menu when the user selects an option\n   */\n  closeMenuOnSelect: bool,\n  /**\n   * Handle change events on the select\n   */\n  change: func.isRequired,\n  /**\n   * If `true`, close the select menu when the user scrolls the document/body.\n     If a function, takes a standard javascript `ScrollEvent` you return a boolean:\n      `true` => The menu closes\n      `false` => The menu stays open\n     This is useful when you have a scrollable modal and want to portal the menu out,\n     but want to avoid graphical issues.\n   */\n  closeMenuOnScroll: oneOfType([bool, func]),\n  /**\n   * This complex object includes all the compositional components that are used\n     in `react-select`. If you wish to overwrite a component, pass in an object\n     with the appropriate namespace.\n     If you only wish to restyle a component, we recommend using the `styles` prop\n     instead. For a list of the components that can be passed in, and the shape\n     that will be passed to them, see [the components docs](/components)\n   */\n  components: object,\n  /**\n   * Whether the value of the select, e.g. SingleValue, should be displayed in the control.\n   */\n  controlShouldRenderValue: bool,\n  defaultValue: oneOfType([array, object]),\n  /**\n   * Delimiter used to join multiple values into a single HTML Input value\n   */\n  delimiter: string,\n  /**\n   * Clear all values when the user presses escape AND the menu is closed\n   */\n  escapeClearsValue: bool,\n  /**\n   * Hide the selected option from the menu\n   */\n  hideSelectedOptions: bool,\n  /**\n   * The id to set on the SelectContainer component\n   */\n  id: string,\n  /**\n   * The id of the search input\n   */\n  inputId: string,\n  /**\n   * Define an id prefix for the select components e.g. {your-id}-value\n   */\n  instanceId: oneOfType([number, string]),\n  /**\n   * Is the select value clearable\n   */\n  isClearable: bool,\n  /**\n   * Is the select disabled\n   */\n  isDisabled: bool,\n  /**\n   * Is the select in a state of loading (async)\n   */\n  isLoading: bool,\n  /**\n   * Support multiple selected options\n   */\n  isMulti: bool,\n  /**\n   * Is the select direction right-to-left\n   */\n  isRtl: bool,\n  /**\n   * Whether to enable search functionality\n   */\n  isSearchable: bool,\n  /**\n   * Label text\n   */\n  label: string,\n  /**\n   * Async: Text to display when loading options\n   */\n  loadingMessage: func,\n  /**\n   * Minimum height of the menu before flipping\n   */\n  minMenuHeight: number,\n  /**\n   * Maximum height of the menu before scrolling\n   */\n  maxMenuHeight: number,\n  /**\n   * Whether the menu is open\n   */\n  menuIsOpen: bool,\n  /**\n   * Default placement of the menu in relation to the control. 'auto' will flip\n     when there isn't enough space below the control.\n   */\n  menuPlacement: oneOf(['auto', 'bottom', 'top']),\n  /**\n   * The CSS position value of the menu, when \"fixed\" extra layout management is required\n   */\n  menuPosition: oneOf(['absolute', 'fixed']),\n  /**\n   * Whether to block scroll events when the menu is open\n   */\n  menuShouldBlockScroll: bool,\n  /**\n   * Whether the menu should be scrolled into view when it opens\n   */\n  menuShouldScrollIntoView: bool,\n  /**\n   * Text to display when there are no options\n   */\n  noOptionsMessage: func,\n  /**\n   * Handle blur events on the control\n   */\n  onBlur: func,\n  /**\n   * Handle focus events on the control\n   */\n  onFocus: func,\n  /**\n   * Handle key down events on the select\n   */\n  onKeyDown: func,\n  /**\n   * Handle the menu opening\n   */\n  onMenuOpen: func,\n  /**\n   * Handle the menu closing\n   */\n  onMenuClose: func,\n  /**\n   * Fired when the user scrolls to the top of the menu\n   */\n  onMenuScrollToTop: func,\n  /**\n   * Fired when the user scrolls to the bottom of the menu\n   */\n  onMenuScrollToBottom: func,\n  /**\n   * Allows control of whether the menu is opened when the Select is focused\n   */\n  openMenuOnFocus: bool,\n  /**\n   * Allows control of whether the menu is opened when the Select is clicked\n   */\n  openMenuOnClick: bool,\n  /**\n   * Array of options that populate the select menu\n   */\n  options: array.isRequired,\n  /**\n   * Number of options to jump in menu when page{up|down} keys are used\n   */\n  pageSize: number,\n  /**\n   * Placeholder for the select value\n   */\n  placeholder: string,\n  /**\n   * Status to relay to screen readers\n   */\n  screenReaderStatus: func,\n  /**\n   * The value of the select; reflected by the selected option\n   */\n  selectedOption: oneOfType([array, object]),\n  /**\n   * Sets the tabIndex attribute on the input\n   */\n  tabIndex: string,\n  /**\n   * Select the currently focused option when the user presses tab\n   */\n  tabSelectsValue: bool\n}\n\nReactSelect.defaultProps = {\n  backspaceRemovesValue: true,\n  closeMenuOnSelect: true,\n  closeMenuOnScroll: false,\n  components: {},\n  controlShouldRenderValue: true,\n  escapeClearsValue: false,\n  isDisabled: false,\n  isLoading: false,\n  isMulti: false,\n  isRtl: false,\n  isSearchable: true,\n  loadingMessage: () => 'Loading...',\n  maxMenuHeight: 300,\n  minMenuHeight: 140,\n  menuPlacement: 'bottom',\n  menuPosition: 'absolute',\n  menuShouldBlockScroll: false,\n  noOptionsMessage: () => 'No options',\n  openMenuOnFocus: false,\n  openMenuOnClick: true,\n  options: [],\n  pageSize: 5,\n  placeholder: 'Select...',\n  screenReaderStatus: ({ count }) => `${count} result${count !== 1 ? 's' : ''} available`,\n  styles: defaultStyles,\n  tabIndex: '0',\n  tabSelectsValue: true\n}\n"]},"metadata":{},"sourceType":"module"}