{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/services/authentication/providers/userProvider.js\";\nvar __jsx = React.createElement;\n\n/**\n * Authentication - Providers - User\n * Provides context, state and hooks into managing a user\n *\n * @see https://reacttricks.com/sharing-global-data-in-next-with-custom-app-and-usecontext-hook/\n */\n// React\nimport React, { useEffect, useState } from 'react'; // Next\n\nimport Router from 'next/router'; // UI\n\nimport { Api, useNotifications, UserContext, validateToken } from \"../../../\";\nexport var UserProvider = function UserProvider(_ref) {\n  var children = _ref.children,\n      jwtConfig = _ref.jwtConfig;\n\n  var _useState = useState(null),\n      accessToken = _useState[0],\n      setAccessToken = _useState[1];\n\n  var _useState2 = useState(null),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(true),\n      isLoading = _useState3[0],\n      setIsLoading = _useState3[1];\n\n  var _useNotifications = useNotifications('messages', {\n    active: true\n  }, 25),\n      notifications = _useNotifications.data.notifications,\n      fetchNotifications = _useNotifications.fetchNotifications;\n\n  useEffect(function () {\n    var bearerToken = window.localStorage.getItem('bearerToken');\n\n    if (bearerToken) {\n      try {\n        var tokenData = validateToken(bearerToken, jwtConfig);\n\n        if (tokenData.user) {\n          setUser(tokenData.user);\n        }\n      } catch (e) {\n        // Invalid token\n        window.localStorage.removeItem('bearerToken');\n        setAccessToken(null);\n        setUser(null);\n      }\n\n      setIsLoading(false);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  var signIn = function signIn(provider, username, password, callback) {\n    var user, token, _ref2, data, error, isAuthed;\n\n    return _regeneratorRuntime.async(function signIn$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Api.post('auth', {\n              username: username,\n              password: password\n            }));\n\n          case 3:\n            _ref2 = _context.sent;\n            data = _ref2.data;\n            user = data.user;\n            token = data.token;\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            error = _context.t0.response.data.error;\n            callback(new Error(error));\n\n          case 13:\n            isAuthed = user && token;\n\n            if (isAuthed) {\n              setUser(user);\n              window.localStorage.setItem('bearerToken', token);\n              setAccessToken(token);\n              Router.push('/dashboard');\n            }\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]]);\n  };\n\n  var signOut = function signOut() {\n    window.localStorage.removeItem('bearerToken');\n    window.localStorage.removeItem('active-notifications');\n    setAccessToken(null);\n    setUser(null);\n    Router.push('/account/sign-in');\n  };\n\n  var authorise = function authorise(condition) {\n    if (!condition(user)) {\n      Router.push('/account/sign-in');\n      return false;\n    }\n\n    return true;\n  };\n\n  return !isLoading && __jsx(UserContext.Provider, {\n    value: {\n      accessToken: accessToken,\n      authorise: authorise,\n      fetchNotifications: fetchNotifications,\n      notifications: notifications,\n      signIn: signIn,\n      signOut: signOut,\n      user: user\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/services/authentication/providers/userProvider.js"],"names":["React","useEffect","useState","Router","Api","useNotifications","UserContext","validateToken","UserProvider","children","jwtConfig","accessToken","setAccessToken","user","setUser","isLoading","setIsLoading","active","notifications","data","fetchNotifications","bearerToken","window","localStorage","getItem","tokenData","e","removeItem","signIn","provider","username","password","callback","post","token","error","response","Error","isAuthed","setItem","push","signOut","authorise","condition"],"mappings":";;;;AAAA;;;;;;AAOA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AACA,SAASC,GAAT,EAAcC,gBAAd,EAAgCC,WAAhC,EAA6CC,aAA7C;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAA6B;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,kBACjBR,QAAQ,CAAC,IAAD,CADS;AAAA,MAChDS,WADgD;AAAA,MACnCC,cADmC;;AAAA,mBAE/BV,QAAQ,CAAC,IAAD,CAFuB;AAAA,MAEhDW,IAFgD;AAAA,MAE1CC,OAF0C;;AAAA,mBAGrBZ,QAAQ,CAAC,IAAD,CAHa;AAAA,MAGhDa,SAHgD;AAAA,MAGrCC,YAHqC;;AAAA,0BAQnDX,gBAAgB,CAAC,UAAD,EAAa;AAAEY,IAAAA,MAAM,EAAE;AAAV,GAAb,EAA+B,EAA/B,CARmC;AAAA,MAM7CC,aAN6C,qBAMrDC,IANqD,CAM7CD,aAN6C;AAAA,MAOrDE,kBAPqD,qBAOrDA,kBAPqD;;AAUvDnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMoB,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,aAA5B,CAApB;;AAEA,QAAIH,WAAJ,EAAiB;AACf,UAAI;AACF,YAAMI,SAAS,GAAGlB,aAAa,CAACc,WAAD,EAAcX,SAAd,CAA/B;;AACA,YAAIe,SAAS,CAACZ,IAAd,EAAoB;AAClBC,UAAAA,OAAO,CAACW,SAAS,CAACZ,IAAX,CAAP;AACD;AACF,OALD,CAKE,OAAOa,CAAP,EAAU;AACV;AACAJ,QAAAA,MAAM,CAACC,YAAP,CAAoBI,UAApB,CAA+B,aAA/B;AACAf,QAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;;AAEDE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAdD,MAcO;AACLA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GApBQ,EAoBN,EApBM,CAAT;;AAsBA,MAAMY,MAAM,GAAG,SAATA,MAAS,CAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,QAArC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGY5B,GAAG,CAAC6B,IAAJ,CAAS,MAAT,EAAiB;AAAEH,cAAAA,QAAQ,EAARA,QAAF;AAAYC,cAAAA,QAAQ,EAARA;AAAZ,aAAjB,CAHZ;;AAAA;AAAA;AAGHZ,YAAAA,IAHG,SAGHA,IAHG;AAIXN,YAAAA,IAAI,GAAGM,IAAI,CAACN,IAAZ;AACAqB,YAAAA,KAAK,GAAGf,IAAI,CAACe,KAAb;AALW;AAAA;;AAAA;AAAA;AAAA;AAOHC,YAAAA,KAPG,GAOO,YAAIC,QAAJ,CAAajB,IAPpB,CAOHgB,KAPG;AAQXH,YAAAA,QAAQ,CAAC,IAAIK,KAAJ,CAAUF,KAAV,CAAD,CAAR;;AARW;AAWPG,YAAAA,QAXO,GAWIzB,IAAI,IAAIqB,KAXZ;;AAYb,gBAAII,QAAJ,EAAc;AACZxB,cAAAA,OAAO,CAACD,IAAD,CAAP;AACAS,cAAAA,MAAM,CAACC,YAAP,CAAoBgB,OAApB,CAA4B,aAA5B,EAA2CL,KAA3C;AACAtB,cAAAA,cAAc,CAACsB,KAAD,CAAd;AACA/B,cAAAA,MAAM,CAACqC,IAAP,CAAY,YAAZ;AACD;;AAjBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAoBA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBnB,IAAAA,MAAM,CAACC,YAAP,CAAoBI,UAApB,CAA+B,aAA/B;AACAL,IAAAA,MAAM,CAACC,YAAP,CAAoBI,UAApB,CAA+B,sBAA/B;AAEAf,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,IAAAA,OAAO,CAAC,IAAD,CAAP;AAEAX,IAAAA,MAAM,CAACqC,IAAP,CAAY,kBAAZ;AACD,GARD;;AAUA,MAAME,SAAS,GAAG,SAAZA,SAAY,CAAAC,SAAS,EAAI;AAC7B,QAAI,CAACA,SAAS,CAAC9B,IAAD,CAAd,EAAsB;AACpBV,MAAAA,MAAM,CAACqC,IAAP,CAAY,kBAAZ;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GAND;;AAQA,SACE,CAACzB,SAAD,IACE,MAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,WAAW,EAAXA,WADK;AAEL+B,MAAAA,SAAS,EAATA,SAFK;AAGLtB,MAAAA,kBAAkB,EAAlBA,kBAHK;AAILF,MAAAA,aAAa,EAAbA,aAJK;AAKLU,MAAAA,MAAM,EAANA,MALK;AAMLa,MAAAA,OAAO,EAAPA,OANK;AAOL5B,MAAAA,IAAI,EAAJA;AAPK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGJ,QAXH,CAFJ;AAiBD,CAvFM","sourcesContent":["/**\n * Authentication - Providers - User\n * Provides context, state and hooks into managing a user\n *\n * @see https://reacttricks.com/sharing-global-data-in-next-with-custom-app-and-usecontext-hook/\n */\n\n// React\nimport React, { useEffect, useState } from 'react'\n\n// Next\nimport Router from 'next/router'\n\n// UI\nimport { Api, useNotifications, UserContext, validateToken } from '../../../'\n\nexport const UserProvider = ({ children, jwtConfig }) => {\n  const [accessToken, setAccessToken] = useState(null)\n  const [user, setUser] = useState(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const {\n    data: { notifications },\n    fetchNotifications\n  } = useNotifications('messages', { active: true }, 25)\n\n  useEffect(() => {\n    const bearerToken = window.localStorage.getItem('bearerToken')\n\n    if (bearerToken) {\n      try {\n        const tokenData = validateToken(bearerToken, jwtConfig)\n        if (tokenData.user) {\n          setUser(tokenData.user)\n        }\n      } catch (e) {\n        // Invalid token\n        window.localStorage.removeItem('bearerToken')\n        setAccessToken(null)\n        setUser(null)\n      }\n\n      setIsLoading(false)\n    } else {\n      setIsLoading(false)\n    }\n  }, [])\n\n  const signIn = async (provider, username, password, callback) => {\n    let user, token\n    try {\n      const { data } = await Api.post('auth', { username, password })\n      user = data.user\n      token = data.token\n    } catch (err) {\n      const { error } = err.response.data\n      callback(new Error(error))\n    }\n\n    const isAuthed = user && token\n    if (isAuthed) {\n      setUser(user)\n      window.localStorage.setItem('bearerToken', token)\n      setAccessToken(token)\n      Router.push('/dashboard')\n    }\n  }\n\n  const signOut = () => {\n    window.localStorage.removeItem('bearerToken')\n    window.localStorage.removeItem('active-notifications')\n\n    setAccessToken(null)\n    setUser(null)\n\n    Router.push('/account/sign-in')\n  }\n\n  const authorise = condition => {\n    if (!condition(user)) {\n      Router.push('/account/sign-in')\n      return false\n    }\n    return true\n  }\n\n  return (\n    !isLoading && (\n      <UserContext.Provider\n        value={{\n          accessToken,\n          authorise,\n          fetchNotifications,\n          notifications,\n          signIn,\n          signOut,\n          user\n        }}\n      >\n        {children}\n      </UserContext.Provider>\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}