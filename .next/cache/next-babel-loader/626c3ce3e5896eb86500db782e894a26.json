{"ast":null,"code":"/**\n * Auth utils\n */\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nexport var hashPassword = function hashPassword(password) {\n  return bcrypt.hashSync(password, 10);\n};\nexport var validatePassword = function validatePassword(user, password) {\n  return bcrypt.compareSync(password, user.password);\n};\nexport var generateToken = function generateToken(data, config) {\n  return jwt.sign(data, config.secret, {\n    expiresIn: '14d'\n  });\n};\nexport var validateToken = function validateToken(token, config) {\n  return jwt.verify(token, config.secret);\n};\nexport var getUserFromToken = function getUserFromToken(headers, config) {\n  if (!headers.Authorization) {\n    return null;\n  }\n\n  var token = headers.Authorization.split(' ')[1];\n\n  if (!token) {\n    return null;\n  }\n\n  var decoded = validateToken(token, config);\n\n  if (!decoded || !decoded.user) {\n    return null;\n  }\n\n  return decoded.user;\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/utils/auth.js"],"names":["bcrypt","jwt","hashPassword","password","hashSync","validatePassword","user","compareSync","generateToken","data","config","sign","secret","expiresIn","validateToken","token","verify","getUserFromToken","headers","Authorization","split","decoded"],"mappings":"AAAA;;;AAIA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,QAAQ,EAAI;AACtC,SAAOH,MAAM,CAACI,QAAP,CAAgBD,QAAhB,EAA0B,EAA1B,CAAP;AACD,CAFM;AAIP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAOH,QAAP,EAAoB;AAClD,SAAOH,MAAM,CAACO,WAAP,CAAmBJ,QAAnB,EAA6BG,IAAI,CAACH,QAAlC,CAAP;AACD,CAFM;AAIP,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAOC,MAAP,EAAkB;AAC7C,SAAOT,GAAG,CAACU,IAAJ,CAASF,IAAT,EAAeC,MAAM,CAACE,MAAtB,EAA8B;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAA9B,CAAP;AACD,CAFM;AAIP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQL,MAAR,EAAmB;AAC9C,SAAOT,GAAG,CAACe,MAAJ,CAAWD,KAAX,EAAkBL,MAAM,CAACE,MAAzB,CAAP;AACD,CAFM;AAIP,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAUR,MAAV,EAAqB;AACnD,MAAI,CAACQ,OAAO,CAACC,aAAb,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,MAAMJ,KAAK,GAAGG,OAAO,CAACC,aAAR,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAd;;AAEA,MAAI,CAACL,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,MAAMM,OAAO,GAAGP,aAAa,CAACC,KAAD,EAAQL,MAAR,CAA7B;;AAEA,MAAI,CAACW,OAAD,IAAY,CAACA,OAAO,CAACf,IAAzB,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,SAAOe,OAAO,CAACf,IAAf;AACD,CAlBM","sourcesContent":["/**\n * Auth utils\n */\n\nimport bcrypt from 'bcryptjs'\nimport jwt from 'jsonwebtoken'\n\nexport const hashPassword = password => {\n  return bcrypt.hashSync(password, 10)\n}\n\nexport const validatePassword = (user, password) => {\n  return bcrypt.compareSync(password, user.password)\n}\n\nexport const generateToken = (data, config) => {\n  return jwt.sign(data, config.secret, { expiresIn: '14d' })\n}\n\nexport const validateToken = (token, config) => {\n  return jwt.verify(token, config.secret)\n}\n\nexport const getUserFromToken = (headers, config) => {\n  if (!headers.Authorization) {\n    return null\n  }\n\n  const token = headers.Authorization.split(' ')[1]\n\n  if (!token) {\n    return null\n  }\n\n  const decoded = validateToken(token, config)\n\n  if (!decoded || !decoded.user) {\n    return null\n  }\n\n  return decoded.user\n}\n"]},"metadata":{},"sourceType":"module"}