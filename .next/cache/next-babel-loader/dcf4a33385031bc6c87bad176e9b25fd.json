{"ast":null,"code":"/**\n * Format date\n */\nimport moment from 'moment';\nexport const formatDate = date => {\n  return new Date(date.seconds * 1000).toLocaleDateString();\n};\nexport const formatIntDate = (date, code = 'en-GB') => {\n  if (date instanceof Date === false) {\n    return date;\n  }\n\n  const newDate = new Intl.DateTimeFormat(code, {\n    year: 'numeric',\n    month: 'long',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(date);\n  return newDate;\n};\nexport const formatIntDateShort = (date, code = 'en-GB') => {\n  if (date instanceof Date === false) {\n    return date;\n  }\n\n  const newDate = new Intl.DateTimeFormat(code, {\n    month: 'long',\n    day: '2-digit'\n  }).format(date);\n  return newDate;\n};\nexport const formatIntDateYear = (date, code = 'en-GB') => {\n  if (date instanceof Date === false) {\n    return date;\n  }\n\n  const newDate = new Intl.DateTimeFormat(code, {\n    year: 'numeric'\n  }).format(date);\n  return newDate;\n};\nexport const formatDateStandard = date => {\n  var d = new Date(date);\n  var month = '' + (d.getMonth() + 1);\n  var day = '' + d.getDate();\n  var year = d.getFullYear();\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n  return [year, month, day].join('-');\n};\nexport const formatRelativeTime = date => {\n  return moment(date).fromNow();\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/utils/formatDate.js"],"names":["moment","formatDate","date","Date","seconds","toLocaleDateString","formatIntDate","code","newDate","Intl","DateTimeFormat","year","month","day","hour","minute","format","formatIntDateShort","formatIntDateYear","formatDateStandard","d","getMonth","getDate","getFullYear","length","join","formatRelativeTime","fromNow"],"mappings":"AAAA;;;AAGA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,UAAU,GAAGC,IAAI,IAAI;AAChC,SAAO,IAAIC,IAAJ,CAASD,IAAI,CAACE,OAAL,GAAe,IAAxB,EAA8BC,kBAA9B,EAAP;AACD,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAG,CAACJ,IAAD,EAAOK,IAAI,GAAG,OAAd,KAA0B;AACrD,MAAIL,IAAI,YAAYC,IAAhB,KAAyB,KAA7B,EAAoC;AAClC,WAAOD,IAAP;AACD;;AAED,QAAMM,OAAO,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwBH,IAAxB,EAA8B;AAC5CI,IAAAA,IAAI,EAAE,SADsC;AAE5CC,IAAAA,KAAK,EAAE,MAFqC;AAG5CC,IAAAA,GAAG,EAAE,SAHuC;AAI5CC,IAAAA,IAAI,EAAE,SAJsC;AAK5CC,IAAAA,MAAM,EAAE;AALoC,GAA9B,EAMbC,MANa,CAMNd,IANM,CAAhB;AAQA,SAAOM,OAAP;AACD,CAdM;AAgBP,OAAO,MAAMS,kBAAkB,GAAG,CAACf,IAAD,EAAOK,IAAI,GAAG,OAAd,KAA0B;AAC1D,MAAIL,IAAI,YAAYC,IAAhB,KAAyB,KAA7B,EAAoC;AAClC,WAAOD,IAAP;AACD;;AAED,QAAMM,OAAO,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwBH,IAAxB,EAA8B;AAC5CK,IAAAA,KAAK,EAAE,MADqC;AAE5CC,IAAAA,GAAG,EAAE;AAFuC,GAA9B,EAGbG,MAHa,CAGNd,IAHM,CAAhB;AAKA,SAAOM,OAAP;AACD,CAXM;AAaP,OAAO,MAAMU,iBAAiB,GAAG,CAAChB,IAAD,EAAOK,IAAI,GAAG,OAAd,KAA0B;AACzD,MAAIL,IAAI,YAAYC,IAAhB,KAAyB,KAA7B,EAAoC;AAClC,WAAOD,IAAP;AACD;;AAED,QAAMM,OAAO,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwBH,IAAxB,EAA8B;AAC5CI,IAAAA,IAAI,EAAE;AADsC,GAA9B,EAEbK,MAFa,CAENd,IAFM,CAAhB;AAIA,SAAOM,OAAP;AACD,CAVM;AAYP,OAAO,MAAMW,kBAAkB,GAAGjB,IAAI,IAAI;AACxC,MAAIkB,CAAC,GAAG,IAAIjB,IAAJ,CAASD,IAAT,CAAR;AACA,MAAIU,KAAK,GAAG,MAAMQ,CAAC,CAACC,QAAF,KAAe,CAArB,CAAZ;AACA,MAAIR,GAAG,GAAG,KAAKO,CAAC,CAACE,OAAF,EAAf;AACA,MAAIX,IAAI,GAAGS,CAAC,CAACG,WAAF,EAAX;AAEA,MAAIX,KAAK,CAACY,MAAN,GAAe,CAAnB,EAAsBZ,KAAK,GAAG,MAAMA,KAAd;AACtB,MAAIC,GAAG,CAACW,MAAJ,GAAa,CAAjB,EAAoBX,GAAG,GAAG,MAAMA,GAAZ;AAEpB,SAAO,CAACF,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAmBY,IAAnB,CAAwB,GAAxB,CAAP;AACD,CAVM;AAYP,OAAO,MAAMC,kBAAkB,GAAGxB,IAAI,IAAI;AACxC,SAAOF,MAAM,CAACE,IAAD,CAAN,CAAayB,OAAb,EAAP;AACD,CAFM","sourcesContent":["/**\n * Format date\n */\nimport moment from 'moment'\n\nexport const formatDate = date => {\n  return new Date(date.seconds * 1000).toLocaleDateString()\n}\n\nexport const formatIntDate = (date, code = 'en-GB') => {\n  if (date instanceof Date === false) {\n    return date\n  }\n\n  const newDate = new Intl.DateTimeFormat(code, {\n    year: 'numeric',\n    month: 'long',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(date)\n\n  return newDate\n}\n\nexport const formatIntDateShort = (date, code = 'en-GB') => {\n  if (date instanceof Date === false) {\n    return date\n  }\n\n  const newDate = new Intl.DateTimeFormat(code, {\n    month: 'long',\n    day: '2-digit'\n  }).format(date)\n\n  return newDate\n}\n\nexport const formatIntDateYear = (date, code = 'en-GB') => {\n  if (date instanceof Date === false) {\n    return date\n  }\n\n  const newDate = new Intl.DateTimeFormat(code, {\n    year: 'numeric'\n  }).format(date)\n\n  return newDate\n}\n\nexport const formatDateStandard = date => {\n  var d = new Date(date)\n  var month = '' + (d.getMonth() + 1)\n  var day = '' + d.getDate()\n  var year = d.getFullYear()\n\n  if (month.length < 2) month = '0' + month\n  if (day.length < 2) day = '0' + day\n\n  return [year, month, day].join('-')\n}\n\nexport const formatRelativeTime = date => {\n  return moment(date).fromNow()\n}\n"]},"metadata":{},"sourceType":"module"}