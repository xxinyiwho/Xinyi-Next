{"ast":null,"code":"/**\n * LineChart - Variables\n */\nimport { COLOUR } from \"../../../theme/variables/colour\";\nexport var LINECHART = {\n  axisBottom: function axisBottom() {\n    return {\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: this.bottomLegend,\n      // string passed as prop\n      legendOffset: 36,\n      legendPosition: 'middle'\n    };\n  },\n  axisLeft: function axisLeft() {\n    return {\n      orient: 'left',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: this.leftLegend,\n      // string passed as prop\n      legendOffset: -40,\n      legendPosition: 'middle'\n    };\n  },\n  axisTop: null,\n  axisRight: null,\n  margin: function margin() {\n    return {\n      top: 30,\n      right: this.showLegend ? 110 : 30,\n      // props context\n      bottom: 50,\n      left: 60\n    };\n  },\n  legends: [{\n    anchor: 'bottom-right',\n    direction: 'column',\n    justify: false,\n    translateX: 100,\n    translateY: 0,\n    itemsSpacing: 0,\n    itemDirection: 'left-to-right',\n    itemWidth: 80,\n    itemHeight: 20,\n    itemOpacity: 0.75,\n    symbolSize: 12,\n    symbolShape: 'circle',\n    symbolBorderColor: 'rgba(0, 0, 0, .5)',\n    effects: [{\n      on: 'hover',\n      style: {\n        itemBackground: 'rgba(0, 0, 0, .03)',\n        itemOpacity: 1\n      }\n    }]\n  }],\n  pointColor: COLOUR.white,\n  pointSize: 10,\n  pointBorderColor: {\n    from: 'serieColor'\n  },\n  pointBorderWidth: 2,\n  pointLabel: 'y',\n  pointLabelYOffset: -12,\n  useMesh: true,\n  xScale: {\n    type: 'point'\n  },\n  yScale: function yScale() {\n    return {\n      type: 'linear',\n      stacked: !!this.stacked,\n      // props context\n      min: 'auto',\n      max: 'auto'\n    };\n  }\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/molecules/charts/lineChart/variables.js"],"names":["COLOUR","LINECHART","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","bottomLegend","legendOffset","legendPosition","axisLeft","leftLegend","axisTop","axisRight","margin","top","right","showLegend","bottom","left","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","pointColor","white","pointSize","pointBorderColor","from","pointBorderWidth","pointLabel","pointLabelYOffset","useMesh","xScale","type","yScale","stacked","min","max"],"mappings":"AAAA;;;AAIA,SAASA,MAAT;AAEA,OAAO,IAAMC,SAAS,GAAG;AACvBC,EAAAA,UAAU,EAAE,sBAAY;AACtB,WAAO;AACLC,MAAAA,MAAM,EAAE,QADH;AAELC,MAAAA,QAAQ,EAAE,CAFL;AAGLC,MAAAA,WAAW,EAAE,CAHR;AAILC,MAAAA,YAAY,EAAE,CAJT;AAKLC,MAAAA,MAAM,EAAE,KAAKC,YALR;AAKsB;AAC3BC,MAAAA,YAAY,EAAE,EANT;AAOLC,MAAAA,cAAc,EAAE;AAPX,KAAP;AASD,GAXsB;AAYvBC,EAAAA,QAAQ,EAAE,oBAAY;AACpB,WAAO;AACLR,MAAAA,MAAM,EAAE,MADH;AAELC,MAAAA,QAAQ,EAAE,CAFL;AAGLC,MAAAA,WAAW,EAAE,CAHR;AAILC,MAAAA,YAAY,EAAE,CAJT;AAKLC,MAAAA,MAAM,EAAE,KAAKK,UALR;AAKoB;AACzBH,MAAAA,YAAY,EAAE,CAAC,EANV;AAOLC,MAAAA,cAAc,EAAE;AAPX,KAAP;AASD,GAtBsB;AAuBvBG,EAAAA,OAAO,EAAE,IAvBc;AAwBvBC,EAAAA,SAAS,EAAE,IAxBY;AAyBvBC,EAAAA,MAAM,EAAE,kBAAY;AAClB,WAAO;AACLC,MAAAA,GAAG,EAAE,EADA;AAELC,MAAAA,KAAK,EAAE,KAAKC,UAAL,GAAkB,GAAlB,GAAwB,EAF1B;AAE8B;AACnCC,MAAAA,MAAM,EAAE,EAHH;AAILC,MAAAA,IAAI,EAAE;AAJD,KAAP;AAMD,GAhCsB;AAiCvBC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,MAAM,EAAE,cADV;AAEEC,IAAAA,SAAS,EAAE,QAFb;AAGEC,IAAAA,OAAO,EAAE,KAHX;AAIEC,IAAAA,UAAU,EAAE,GAJd;AAKEC,IAAAA,UAAU,EAAE,CALd;AAMEC,IAAAA,YAAY,EAAE,CANhB;AAOEC,IAAAA,aAAa,EAAE,eAPjB;AAQEC,IAAAA,SAAS,EAAE,EARb;AASEC,IAAAA,UAAU,EAAE,EATd;AAUEC,IAAAA,WAAW,EAAE,IAVf;AAWEC,IAAAA,UAAU,EAAE,EAXd;AAYEC,IAAAA,WAAW,EAAE,QAZf;AAaEC,IAAAA,iBAAiB,EAAE,mBAbrB;AAcEC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,EAAE,EAAE,OADN;AAEEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,cAAc,EAAE,oBADX;AAELP,QAAAA,WAAW,EAAE;AAFR;AAFT,KADO;AAdX,GADO,CAjCc;AA2DvBQ,EAAAA,UAAU,EAAEvC,MAAM,CAACwC,KA3DI;AA4DvBC,EAAAA,SAAS,EAAE,EA5DY;AA6DvBC,EAAAA,gBAAgB,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GA7DK;AA8DvBC,EAAAA,gBAAgB,EAAE,CA9DK;AA+DvBC,EAAAA,UAAU,EAAE,GA/DW;AAgEvBC,EAAAA,iBAAiB,EAAE,CAAC,EAhEG;AAiEvBC,EAAAA,OAAO,EAAE,IAjEc;AAkEvBC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAlEe;AAmEvBC,EAAAA,MAAM,EAAE,kBAAY;AAClB,WAAO;AACLD,MAAAA,IAAI,EAAE,QADD;AAELE,MAAAA,OAAO,EAAE,CAAC,CAAC,KAAKA,OAFX;AAEoB;AACzBC,MAAAA,GAAG,EAAE,MAHA;AAILC,MAAAA,GAAG,EAAE;AAJA,KAAP;AAMD;AA1EsB,CAAlB","sourcesContent":["/**\n * LineChart - Variables\n */\n\nimport { COLOUR } from '../../../theme/variables/colour'\n\nexport const LINECHART = {\n  axisBottom: function () {\n    return {\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: this.bottomLegend, // string passed as prop\n      legendOffset: 36,\n      legendPosition: 'middle'\n    }\n  },\n  axisLeft: function () {\n    return {\n      orient: 'left',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: this.leftLegend, // string passed as prop\n      legendOffset: -40,\n      legendPosition: 'middle'\n    }\n  },\n  axisTop: null,\n  axisRight: null,\n  margin: function () {\n    return {\n      top: 30,\n      right: this.showLegend ? 110 : 30, // props context\n      bottom: 50,\n      left: 60\n    }\n  },\n  legends: [\n    {\n      anchor: 'bottom-right',\n      direction: 'column',\n      justify: false,\n      translateX: 100,\n      translateY: 0,\n      itemsSpacing: 0,\n      itemDirection: 'left-to-right',\n      itemWidth: 80,\n      itemHeight: 20,\n      itemOpacity: 0.75,\n      symbolSize: 12,\n      symbolShape: 'circle',\n      symbolBorderColor: 'rgba(0, 0, 0, .5)',\n      effects: [\n        {\n          on: 'hover',\n          style: {\n            itemBackground: 'rgba(0, 0, 0, .03)',\n            itemOpacity: 1\n          }\n        }\n      ]\n    }\n  ],\n  pointColor: COLOUR.white,\n  pointSize: 10,\n  pointBorderColor: { from: 'serieColor' },\n  pointBorderWidth: 2,\n  pointLabel: 'y',\n  pointLabelYOffset: -12,\n  useMesh: true,\n  xScale: { type: 'point' },\n  yScale: function () {\n    return {\n      type: 'linear',\n      stacked: !!this.stacked, // props context\n      min: 'auto',\n      max: 'auto'\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}