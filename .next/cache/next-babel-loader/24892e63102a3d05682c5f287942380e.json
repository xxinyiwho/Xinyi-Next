{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n\n/**\n * Services - Hooks  - useNotifications\n *\n */\n// React\nimport { useState, useEffect } from 'react'; // UI\n\nimport { Api, useInterval } from \"../../../\";\nexport var useNotifications = function useNotifications(url) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;\n\n  var _useState = useState({\n    messages: []\n  }),\n      data = _useState[0],\n      setData = _useState[1];\n\n  if (!url) {\n    return {\n      data: data\n    };\n  }\n\n  var fetchNotifications = function fetchNotifications() {\n    var res;\n    return _regeneratorRuntime.async(function fetchNotifications$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Api.get(url, params));\n\n          case 2:\n            res = _context.sent;\n\n            if (res.status === 200 && res.data.messages) {\n              window.localStorage.setItem('active-notifications', _JSON$stringify(res.data.messages));\n              setData({\n                notifications: res.data.messages\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  useInterval(function () {\n    fetchNotifications();\n  }, seconds * 1000);\n  useEffect(function () {\n    fetchNotifications();\n  }, []);\n  return {\n    data: data,\n    fetchNotifications: fetchNotifications\n  };\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/services/hooks/useNotifications.js"],"names":["useState","useEffect","Api","useInterval","useNotifications","url","params","seconds","messages","data","setData","fetchNotifications","get","res","status","window","localStorage","setItem","notifications"],"mappings":";;;AAAA;;;;AAKA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,SAASC,GAAT,EAAcC,WAAd;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAoC;AAAA,MAA9BC,MAA8B,uEAArB,EAAqB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAAA,kBAC1CP,QAAQ,CAAC;AAAEQ,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CADkC;AAAA,MAC3DC,IAD2D;AAAA,MACrDC,OADqD;;AAGlE,MAAI,CAACL,GAAL,EAAU;AACR,WAAO;AAAEI,MAAAA,IAAI,EAAJA;AAAF,KAAP;AACD;;AAED,MAAME,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACPT,GAAG,CAACU,GAAJ,CAAQP,GAAR,EAAaC,MAAb,CADO;;AAAA;AACnBO,YAAAA,GADmB;;AAGzB,gBAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACJ,IAAJ,CAASD,QAAnC,EAA6C;AAC3CO,cAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,sBAA5B,EAAoD,gBAAeJ,GAAG,CAACJ,IAAJ,CAASD,QAAxB,CAApD;AACAE,cAAAA,OAAO,CAAC;AAAEQ,gBAAAA,aAAa,EAAEL,GAAG,CAACJ,IAAJ,CAASD;AAA1B,eAAD,CAAP;AACD;;AANwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AASAL,EAAAA,WAAW,CAAC,YAAM;AAChBQ,IAAAA,kBAAkB;AACnB,GAFU,EAERJ,OAAO,GAAG,IAFF,CAAX;AAIAN,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,kBAAkB;AACnB,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAAEF,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,kBAAkB,EAAlBA;AAAR,GAAP;AACD,CAzBM","sourcesContent":["/**\n * Services - Hooks  - useNotifications\n *\n */\n\n// React\nimport { useState, useEffect } from 'react'\n\n// UI\nimport { Api, useInterval } from '../../../'\n\nexport const useNotifications = (url, params = {}, seconds = 60) => {\n  const [data, setData] = useState({ messages: [] })\n\n  if (!url) {\n    return { data }\n  }\n\n  const fetchNotifications = async () => {\n    const res = await Api.get(url, params)\n\n    if (res.status === 200 && res.data.messages) {\n      window.localStorage.setItem('active-notifications', JSON.stringify(res.data.messages))\n      setData({ notifications: res.data.messages })\n    }\n  }\n\n  useInterval(() => {\n    fetchNotifications()\n  }, seconds * 1000)\n\n  useEffect(() => {\n    fetchNotifications()\n  }, [])\n\n  return { data, fetchNotifications }\n}\n"]},"metadata":{},"sourceType":"module"}