{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/molecules/getAddress/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Get Address\n */\n// React\nimport { forwardRef, useImperativeHandle, useState } from 'react';\nimport { func, string } from 'prop-types'; // UI\n\nimport { Button, Input, Select, validatorPostCode } from \"../../\";\nexport var GetAddress = forwardRef(function (_ref, ref) {\n  var apiKey = _ref.apiKey,\n      error = _ref.error,\n      change = _ref.change,\n      form = _ref.form,\n      handleFindAddress = _ref.handleFindAddress,\n      handlePopulateAddress = _ref.handlePopulateAddress,\n      selectAddress = _ref.selectAddress;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState({\n    data: []\n  }),\n      addresses = _useState2[0],\n      setAddresses = _useState2[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      removeWhitespace: function removeWhitespace(postcode) {\n        return postcode.replace(/\\s/g, '');\n      },\n      validatePostcode: function validatePostcode(postcode) {\n        validatorPostCode(postcode);\n      },\n      getAddress: function getAddress(postcode) {\n        setLoading(true); // let data = addresses.data\n        // data = ADDRESS_DATA.addresses\n        // setAddresses({ ...addresses, data: [...data] })\n        // Fetch\n\n        window.fetch(\"https://api.getaddress.io/find//\".concat(postcode, \"?api-key=\").concat(apiKey)).then(function (response) {\n          if (!response.ok) {\n            return false;\n          }\n\n          return response.json();\n        }).then(function (data) {\n          setAddresses(_objectSpread({}, addresses, {\n            data: data.addresses\n          }));\n        })[\"catch\"](function (error) {\n          console.error('Error', error);\n        });\n      }\n    };\n  });\n\n  var input = function input() {\n    return __jsx(Input, {\n      change: change,\n      id: \"postcode\",\n      label: \"Postcode\",\n      value: form.postcode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  };\n\n  var button = function button() {\n    return __jsx(Button, {\n      content: \"Find your address\",\n      context: \"primary\",\n      onClick: handleFindAddress,\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  };\n\n  var postcodeAddresses = function postcodeAddresses() {\n    if (loading) {\n      if (addresses.data.length > 0) {\n        // Reduce the array to conform to the select\n        var reduced = addresses.data.reduce(function (acc, cur, i) {\n          acc.push({\n            text: cur,\n            value: i + 1\n          });\n          return acc;\n        }, []);\n        reduced.unshift({\n          disabled: true,\n          text: 'Select address',\n          value: ''\n        });\n        return __jsx(React.Fragment, null, __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }), __jsx(Select, {\n          change: handlePopulateAddress,\n          id: \"addresses\",\n          label: \"Select your address\",\n          options: reduced,\n          value: selectAddress,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }));\n      }\n    }\n  };\n\n  var addressDetails = function addressDetails() {\n    if (form.line1) {\n      var changedInputs = [{\n        label: 'Address line 1',\n        id: 'line1'\n      }, {\n        label: 'Address line 2',\n        id: 'line2',\n        required: false\n      }, {\n        label: 'Address line 3',\n        id: 'line3',\n        required: false\n      }, {\n        label: 'City / Town',\n        id: 'town'\n      }, {\n        label: 'County',\n        id: 'county',\n        required: false\n      }, {\n        label: 'Postcode',\n        id: 'postcode'\n      }, {\n        label: 'Country',\n        id: 'country'\n      }];\n      return changedInputs.map(function (_ref2) {\n        var label = _ref2.label,\n            id = _ref2.id,\n            required = _ref2.required;\n        return __jsx(\"span\", {\n          key: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, __jsx(Input, {\n          label: label,\n          id: id,\n          change: change,\n          required: required,\n          value: form[id],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }));\n      });\n    } else {\n      return __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n    }\n  };\n\n  var renderError = function renderError() {\n    if (!error) return;\n    return __jsx(\"p\", {\n      className: \"GetAddress-error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"The postcode was not found\");\n  };\n\n  return __jsx(React.Fragment, null, input(), button(), renderError(), postcodeAddresses(), addressDetails());\n});\nGetAddress.propTypes = {\n  apiKey: string.isRequired,\n  change: func.isRequired\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/molecules/getAddress/index.js"],"names":["forwardRef","useImperativeHandle","useState","func","string","Button","Input","Select","validatorPostCode","GetAddress","ref","apiKey","error","change","form","handleFindAddress","handlePopulateAddress","selectAddress","loading","setLoading","data","addresses","setAddresses","removeWhitespace","postcode","replace","validatePostcode","getAddress","window","fetch","then","response","ok","json","console","input","button","postcodeAddresses","length","reduced","reduce","acc","cur","i","push","text","value","unshift","disabled","addressDetails","line1","changedInputs","label","id","required","map","renderError","propTypes","isRequired"],"mappings":"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","sourcesContent":["/**\n * Get Address\n */\n\n// React\nimport { forwardRef, useImperativeHandle, useState } from 'react'\nimport { func, string } from 'prop-types'\n\n// UI\nimport { Button, Input, Select, validatorPostCode } from '../../'\n\nexport const GetAddress = forwardRef(\n  (\n    { apiKey, error, change, form, handleFindAddress, handlePopulateAddress, selectAddress },\n    ref\n  ) => {\n    const [loading, setLoading] = useState(false)\n    const [addresses, setAddresses] = useState({ data: [] })\n\n    useImperativeHandle(ref, () => ({\n      removeWhitespace: postcode => {\n        return postcode.replace(/\\s/g, '')\n      },\n\n      validatePostcode: postcode => {\n        validatorPostCode(postcode)\n      },\n\n      getAddress: postcode => {\n        setLoading(true)\n        // let data = addresses.data\n        // data = ADDRESS_DATA.addresses\n        // setAddresses({ ...addresses, data: [...data] })\n\n        // Fetch\n        window\n          .fetch(`https://api.getaddress.io/find//${postcode}?api-key=${apiKey}`)\n          .then(response => {\n            if (!response.ok) {\n              return false\n            }\n            return response.json()\n          })\n          .then(data => {\n            setAddresses({ ...addresses, data: data.addresses })\n          })\n          .catch(error => {\n            console.error('Error', error)\n          })\n      }\n    }))\n\n    const input = () => (\n      <Input change={change} id='postcode' label='Postcode' value={form.postcode} />\n    )\n\n    const button = () => (\n      <Button content='Find your address' context='primary' onClick={handleFindAddress} size='lg' />\n    )\n\n    const postcodeAddresses = () => {\n      if (loading) {\n        if (addresses.data.length > 0) {\n          // Reduce the array to conform to the select\n          const reduced = addresses.data.reduce((acc, cur, i) => {\n            acc.push({ text: cur, value: i + 1 })\n            return acc\n          }, [])\n\n          reduced.unshift({ disabled: true, text: 'Select address', value: '' })\n\n          return (\n            <>\n              <p />\n              <Select\n                change={handlePopulateAddress}\n                id='addresses'\n                label='Select your address'\n                options={reduced}\n                value={selectAddress}\n              />\n            </>\n          )\n        }\n      }\n    }\n\n    const addressDetails = () => {\n      if (form.line1) {\n        const changedInputs = [\n          { label: 'Address line 1', id: 'line1' },\n          { label: 'Address line 2', id: 'line2', required: false },\n          { label: 'Address line 3', id: 'line3', required: false },\n          { label: 'City / Town', id: 'town' },\n          { label: 'County', id: 'county', required: false },\n          { label: 'Postcode', id: 'postcode' },\n          { label: 'Country', id: 'country' }\n        ]\n\n        return changedInputs.map(({ label, id, required }) => {\n          return (\n            <span key={id}>\n              <Input label={label} id={id} change={change} required={required} value={form[id]} />\n            </span>\n          )\n        })\n      } else {\n        return <span />\n      }\n    }\n\n    const renderError = () => {\n      if (!error) return\n      return <p className='GetAddress-error'>The postcode was not found</p>\n    }\n\n    return (\n      <>\n        {input()}\n        {button()}\n        {renderError()}\n        {postcodeAddresses()}\n        {addressDetails()}\n      </>\n    )\n  }\n)\n\nGetAddress.propTypes = {\n  apiKey: string.isRequired,\n  change: func.isRequired\n}\n"]},"metadata":{},"sourceType":"module"}