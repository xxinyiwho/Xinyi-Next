{"ast":null,"code":"var _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/atoms/grid/components/Container.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/**\n * Container\n * Creates a container for the Grid based layout. This container can be fluid or\n * fixed based on the UI breakpoints.\n */\n// React\nimport { bool, node, number, objectOf, oneOfType, string } from 'prop-types'; // Style\n\nimport styled, { css } from 'styled-components';\nexport const Container = ({\n  children,\n  className,\n  fluid,\n  style\n}) => {\n  return __jsx(StyledGrid, {\n    children: children,\n    className: className,\n    fluid: fluid,\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  });\n};\nconst StyledGrid = styled.div.withConfig({\n  displayName: \"Container__StyledGrid\",\n  componentId: \"i3tn3-0\"\n})([\"box-sizing:border-box;margin-left:auto;margin-right:auto;position:relative;width:\", \";\", \" \", \"\"], ({\n  fluid\n}) => fluid && '100%', ({\n  theme\n}) => css([\"padding-left:\", \"px;padding-right:\", \"px;\"], theme.GRID.gutterWidth / 2, theme.GRID.gutterWidth / 2), ({\n  fluid\n}) => !fluid && css([\"@media (min-width:\", \"px){max-width:\", \"px;}@media (min-width:\", \"px){max-width:\", \"px;}@media (min-width:\", \"px){max-width:\", \"px;}@media (min-width:\", \"px){max-width:\", \"px;}\"], ({\n  theme\n}) => theme.GRID.breakpoints.sm, ({\n  theme\n}) => theme.GRID.containerWidths.sm, ({\n  theme\n}) => theme.GRID.breakpoints.md, ({\n  theme\n}) => theme.GRID.containerWidths.md, ({\n  theme\n}) => theme.GRID.breakpoints.lg, ({\n  theme\n}) => theme.GRID.containerWidths.lg, ({\n  theme\n}) => theme.GRID.breakpoints.xl, ({\n  theme\n}) => theme.GRID.containerWidths.xl));\nContainer.propTypes = {\n  children: node.isRequired,\n  className: string,\n  fluid: bool,\n  style: objectOf(oneOfType([number, string]))\n};\nContainer.defaultProps = {\n  fluid: false,\n  style: {}\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/atoms/grid/components/Container.js"],"names":["bool","node","number","objectOf","oneOfType","string","styled","css","Container","children","className","fluid","style","StyledGrid","div","theme","GRID","gutterWidth","breakpoints","sm","containerWidths","md","lg","xl","propTypes","isRequired","defaultProps"],"mappings":";;;;AAAA;;;;;AAMA;AACA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,MAAlD,QAAgE,YAAhE,C,CAEA;;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,SAAZ;AAAuBC,EAAAA,KAAvB;AAA8BC,EAAAA;AAA9B,CAAD,KAA2C;AAClE,SAAO,MAAC,UAAD;AAAY,IAAA,QAAQ,EAAEH,QAAtB;AAAgC,IAAA,SAAS,EAAEC,SAA3C;AAAsD,IAAA,KAAK,EAAEC,KAA7D;AAAoE,IAAA,KAAK,EAAEC,KAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAFM;AAIP,MAAMC,UAAU,GAAGP,MAAM,CAACQ,GAAV;AAAA;AAAA;AAAA,wGAKL,CAAC;AAAEH,EAAAA;AAAF,CAAD,KAAeA,KAAK,IAAI,MALnB,EAMZ,CAAC;AAAEI,EAAAA;AAAF,CAAD,KAAeR,GAAf,gDACgBQ,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyB,CADzC,EAEiBF,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyB,CAF1C,CANY,EAWZ,CAAC;AAAEN,EAAAA;AAAF,CAAD,KACA,CAACA,KAAD,IACAJ,GADA,uLAEuB,CAAC;AAAEQ,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAN,CAAWE,WAAX,CAAuBC,EAF7D,EAGiB,CAAC;AAAEJ,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAN,CAAWI,eAAX,CAA2BD,EAH3D,EAMuB,CAAC;AAAEJ,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAN,CAAWE,WAAX,CAAuBG,EAN7D,EAOiB,CAAC;AAAEN,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAN,CAAWI,eAAX,CAA2BC,EAP3D,EAUuB,CAAC;AAAEN,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAN,CAAWE,WAAX,CAAuBI,EAV7D,EAWiB,CAAC;AAAEP,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAN,CAAWI,eAAX,CAA2BE,EAX3D,EAcuB,CAAC;AAAEP,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAN,CAAWE,WAAX,CAAuBK,EAd7D,EAeiB,CAAC;AAAER,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAN,CAAWI,eAAX,CAA2BG,EAf3D,CAZY,CAAhB;AAgCAf,SAAS,CAACgB,SAAV,GAAsB;AACpBf,EAAAA,QAAQ,EAAER,IAAI,CAACwB,UADK;AAEpBf,EAAAA,SAAS,EAAEL,MAFS;AAGpBM,EAAAA,KAAK,EAAEX,IAHa;AAIpBY,EAAAA,KAAK,EAAET,QAAQ,CAACC,SAAS,CAAC,CAACF,MAAD,EAASG,MAAT,CAAD,CAAV;AAJK,CAAtB;AAOAG,SAAS,CAACkB,YAAV,GAAyB;AACvBf,EAAAA,KAAK,EAAE,KADgB;AAEvBC,EAAAA,KAAK,EAAE;AAFgB,CAAzB","sourcesContent":["/**\n * Container\n * Creates a container for the Grid based layout. This container can be fluid or\n * fixed based on the UI breakpoints.\n */\n\n// React\nimport { bool, node, number, objectOf, oneOfType, string } from 'prop-types'\n\n// Style\nimport styled, { css } from 'styled-components'\n\nexport const Container = ({ children, className, fluid, style }) => {\n  return <StyledGrid children={children} className={className} fluid={fluid} style={style} />\n}\n\nconst StyledGrid = styled.div`\n  box-sizing: border-box;\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  width: ${({ fluid }) => fluid && '100%'};\n  ${({ theme }) => css`\n    padding-left: ${theme.GRID.gutterWidth / 2}px;\n    padding-right: ${theme.GRID.gutterWidth / 2}px;\n  `}\n\n  ${({ fluid }) =>\n    !fluid &&\n    css`\n      @media (min-width: ${({ theme }) => theme.GRID.breakpoints.sm}px) {\n        max-width: ${({ theme }) => theme.GRID.containerWidths.sm}px;\n      }\n\n      @media (min-width: ${({ theme }) => theme.GRID.breakpoints.md}px) {\n        max-width: ${({ theme }) => theme.GRID.containerWidths.md}px;\n      }\n\n      @media (min-width: ${({ theme }) => theme.GRID.breakpoints.lg}px) {\n        max-width: ${({ theme }) => theme.GRID.containerWidths.lg}px;\n      }\n\n      @media (min-width: ${({ theme }) => theme.GRID.breakpoints.xl}px) {\n        max-width: ${({ theme }) => theme.GRID.containerWidths.xl}px;\n      }\n    `}\n`\n\nContainer.propTypes = {\n  children: node.isRequired,\n  className: string,\n  fluid: bool,\n  style: objectOf(oneOfType([number, string]))\n}\n\nContainer.defaultProps = {\n  fluid: false,\n  style: {}\n}\n"]},"metadata":{},"sourceType":"module"}