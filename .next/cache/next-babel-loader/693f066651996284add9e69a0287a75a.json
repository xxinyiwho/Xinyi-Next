{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/atoms/form/form/index.js\";\nvar __jsx = React.createElement;\n\n/**\n * Form\n * Validates each field based on HTML5 atttributes, then calls the submit method\n * of the calling class\n */\n// React\nimport React, { Component } from 'react';\nimport { func } from 'prop-types'; // Style\n\nimport styled from 'styled-components';\nexport class Form extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isValidated: false\n    });\n\n    _defineProperty(this, \"getErrorLabel\", elem => {\n      const {\n        errorClassName\n      } = Form;\n      const {\n        parentNode,\n        parentNode: {\n          nodeName: parentNodeName\n        },\n        nodeName\n      } = elem; // check if element is of type input and if parent's nodeName is label\n\n      if (nodeName.toLowerCase() === 'input' && parentNodeName.toLowerCase() !== 'label') {\n        return parentNode.parentNode.querySelector(errorClassName);\n      }\n\n      return parentNode.querySelector(errorClassName);\n    });\n\n    _defineProperty(this, \"validate\", () => {\n      // this.formEl is a reference in the component to the form DOM element.\n      const formEl = this.formEl;\n      const formLength = formEl.length;\n      /**\n       * The checkValidity() method on a form runs the html5 form validation of\n       * its elements and returns the result as a boolean.\n       *\n       * It returns 'false' if at least one of the form elements does not qualify,\n       * and 'true', if all form elements are filled with valid values.\n       */\n\n      if (formEl.checkValidity() === false) {\n        for (let i = 0; i < formLength; i++) {\n          // the i-th child of the form corresponds to the forms i-th input element\n          const elem = formEl[i];\n          let errorLabel = this.getErrorLabel(elem);\n\n          if (elem.type !== 'checkbox' && elem.parentNode.parentNode.nodeName.toLowerCase() === 'fieldset') {\n            errorLabel = elem.parentNode.parentNode.querySelector('.Form-feedback');\n          } // errorLabel placed next to an element is the container we want to use\n          // for validation error message for that element\n          // const errorLabel = parentNode.querySelector('.Form-feedback')\n          // A form element contains also any buttuns contained in the form. There\n          // is no need to validate a button, so, we'll skip that nodes.\n\n\n          if (errorLabel && elem.nodeName.toLowerCase() !== 'button' && elem.nodeName.toLowerCase() !== 'fieldset') {\n            // Each note in html5 form has a validity property. It contains the\n            // validation state of that element. The elem.validity.valid property\n            // indicates whether the element qualifies its validation rules or no.\n            // If it does not qualify, the elem.validationMessage property will\n            // contain the localized validation error message. We will show that\n            // message in our error container if the element is invalid, and clear\n            // the previous message, if it is valid.\n            if (!elem.validity.valid) {\n              errorLabel.textContent = elem.validationMessage;\n            } else {\n              errorLabel.textContent = '';\n            }\n          }\n        } // Return 'false', as the formEl.checkValidity() method said there are some invalid form inputs.\n\n\n        return false;\n      } else {\n        // The form is valid, so we clear all the error messages\n        for (let i = 0; i < formLength; i++) {\n          const elem = formEl[i];\n          let parentNode = elem.parentNode;\n\n          if (parentNode.parentNode.nodeName.toLowerCase() === 'fieldset') {\n            parentNode = elem.parentNode.parentNode;\n          }\n\n          const errorLabel = parentNode.querySelector('.Form-feedback');\n\n          if (errorLabel && elem.nodeName.toLowerCase() !== 'button') {\n            errorLabel.textContent = '';\n          }\n        } // Return 'true', as the form is valid for submission\n\n\n        return true;\n      }\n    });\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault();\n      const {\n        submit\n      } = this.props; // If the call of the validate method was successful, we can proceed with\n      // form submission. Otherwise we do nothing.\n\n      if (this.validate()) {\n        submit(e);\n      }\n\n      this.setState({\n        isValidated: true\n      });\n    });\n  }\n\n  static get errorClassName() {\n    return '.Form-feedback';\n  }\n\n  /**\n   * Render the component as a regular form element with appended children from props.\n   */\n  render() {\n    const {\n      children,\n      className\n    } = this.props;\n    return __jsx(StyledForm, {\n      className: className,\n      noValidate: true,\n      ref: form => this.formEl = form,\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, children);\n  }\n\n}\n\n_defineProperty(Form, \"propTypes\", {\n  submit: func.isRequired\n});\n\nconst StyledForm = styled.form.withConfig({\n  displayName: \"form__StyledForm\",\n  componentId: \"sc-1xk5of6-0\"\n})([\"font-size:1rem;\"]);","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/atoms/form/form/index.js"],"names":["React","Component","func","styled","Form","isValidated","elem","errorClassName","parentNode","nodeName","parentNodeName","toLowerCase","querySelector","formEl","formLength","length","checkValidity","i","errorLabel","getErrorLabel","type","validity","valid","textContent","validationMessage","e","preventDefault","submit","props","validate","setState","render","children","className","form","handleSubmit","isRequired","StyledForm"],"mappings":"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","sourcesContent":["/**\n * Form\n * Validates each field based on HTML5 atttributes, then calls the submit method\n * of the calling class\n */\n\n// React\nimport React, { Component } from 'react'\nimport { func } from 'prop-types'\n\n// Style\nimport styled from 'styled-components'\n\nexport class Form extends Component {\n  state = {\n    isValidated: false\n  }\n\n  static propTypes = {\n    submit: func.isRequired\n  }\n\n  static get errorClassName () {\n    return '.Form-feedback'\n  }\n\n  getErrorLabel = elem => {\n    const { errorClassName } = Form\n    const {\n      parentNode,\n      parentNode: { nodeName: parentNodeName },\n      nodeName\n    } = elem\n    // check if element is of type input and if parent's nodeName is label\n    if (nodeName.toLowerCase() === 'input' && parentNodeName.toLowerCase() !== 'label') {\n      return parentNode.parentNode.querySelector(errorClassName)\n    }\n    return parentNode.querySelector(errorClassName)\n  }\n\n  /**\n   * The main function that validates the form and fills in the error messages.\n   *\n   * @returns bool Returns a boolean showing if the form is valid for submission or not.\n   */\n  validate = () => {\n    // this.formEl is a reference in the component to the form DOM element.\n    const formEl = this.formEl\n    const formLength = formEl.length\n\n    /**\n     * The checkValidity() method on a form runs the html5 form validation of\n     * its elements and returns the result as a boolean.\n     *\n     * It returns 'false' if at least one of the form elements does not qualify,\n     * and 'true', if all form elements are filled with valid values.\n     */\n    if (formEl.checkValidity() === false) {\n      for (let i = 0; i < formLength; i++) {\n        // the i-th child of the form corresponds to the forms i-th input element\n        const elem = formEl[i]\n        let errorLabel = this.getErrorLabel(elem)\n\n        if (\n          elem.type !== 'checkbox' &&\n          elem.parentNode.parentNode.nodeName.toLowerCase() === 'fieldset'\n        ) {\n          errorLabel = elem.parentNode.parentNode.querySelector('.Form-feedback')\n        }\n\n        // errorLabel placed next to an element is the container we want to use\n        // for validation error message for that element\n        // const errorLabel = parentNode.querySelector('.Form-feedback')\n\n        // A form element contains also any buttuns contained in the form. There\n        // is no need to validate a button, so, we'll skip that nodes.\n        if (\n          errorLabel &&\n          elem.nodeName.toLowerCase() !== 'button' &&\n          elem.nodeName.toLowerCase() !== 'fieldset'\n        ) {\n          // Each note in html5 form has a validity property. It contains the\n          // validation state of that element. The elem.validity.valid property\n          // indicates whether the element qualifies its validation rules or no.\n          // If it does not qualify, the elem.validationMessage property will\n          // contain the localized validation error message. We will show that\n          // message in our error container if the element is invalid, and clear\n          // the previous message, if it is valid.\n          if (!elem.validity.valid) {\n            errorLabel.textContent = elem.validationMessage\n          } else {\n            errorLabel.textContent = ''\n          }\n        }\n      }\n\n      // Return 'false', as the formEl.checkValidity() method said there are some invalid form inputs.\n      return false\n    } else {\n      // The form is valid, so we clear all the error messages\n      for (let i = 0; i < formLength; i++) {\n        const elem = formEl[i]\n        let parentNode = elem.parentNode\n\n        if (parentNode.parentNode.nodeName.toLowerCase() === 'fieldset') {\n          parentNode = elem.parentNode.parentNode\n        }\n\n        const errorLabel = parentNode.querySelector('.Form-feedback')\n\n        if (errorLabel && elem.nodeName.toLowerCase() !== 'button') {\n          errorLabel.textContent = ''\n        }\n      }\n\n      // Return 'true', as the form is valid for submission\n      return true\n    }\n  }\n\n  /**\n   * This is the method that is called on form submit.\n   * It stops the default form submission process and proceeds with custom\n   * validation.\n   */\n  handleSubmit = e => {\n    e.preventDefault()\n\n    const { submit } = this.props\n\n    // If the call of the validate method was successful, we can proceed with\n    // form submission. Otherwise we do nothing.\n    if (this.validate()) {\n      submit(e)\n    }\n\n    this.setState({ isValidated: true })\n  }\n\n  /**\n   * Render the component as a regular form element with appended children from props.\n   */\n  render () {\n    const { children, className } = this.props\n\n    return (\n      <StyledForm\n        className={className}\n        noValidate\n        ref={form => (this.formEl = form)}\n        onSubmit={this.handleSubmit}\n      >\n        {children}\n      </StyledForm>\n    )\n  }\n}\n\nconst StyledForm = styled.form`\n  font-size: 1rem;\n`\n"]},"metadata":{},"sourceType":"module"}