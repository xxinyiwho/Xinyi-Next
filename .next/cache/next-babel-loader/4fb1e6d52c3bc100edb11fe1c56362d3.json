{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n// axios\nimport axios from 'axios';\nexport class GeoCoder {\n  constructor({\n    apiKey,\n    debug = false,\n    language,\n    region\n  }) {\n    this.apiKey = apiKey;\n    this.debug = debug;\n    this.language = language;\n    this.region = region;\n    this.GOOGLE_API_URL = 'https://maps.google.com/maps/api/geocode/json';\n  }\n\n  log(message, warn = false) {\n    if (this.debug) {\n      if (warn) {\n        console.warn(message);\n      } else {\n        console.log(message);\n      }\n    }\n  }\n\n  async handleUrl(url) {\n    const response = await axios.get(url).catch(() => _Promise.reject(new Error('Error fetching data')));\n\n    if (response.data.status === 'OK') {\n      this.log(response.data);\n      return response.data;\n    }\n\n    this.log(`${response.statusText}.\\nServer returned status code ${response.statusText}`, true);\n    return _Promise.reject(new Error(`${response.statusText}.\\nServer returned status code ${response.statusText}`));\n  }\n  /**\n   *\n   * @param {Object}\n   * @returns {Promise}\n   */\n\n\n  async fromAddress({\n    address,\n    city = ''\n  }) {\n    if (!address) {\n      this.log('Provided address is invalid', true);\n      return _Promise.reject(new Error('Provided address is invalid'));\n    }\n\n    const location = encodeURIComponent(city + ', ' + address);\n    let url = `${this.GOOGLE_API_URL}?address=${location}`;\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`;\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`;\n    }\n\n    if (this.region) {\n      url += `&region=${encodeURIComponent(this.region)}`;\n    }\n\n    const {\n      results: [result]\n    } = await this.handleUrl(url);\n    const {\n      geometry: {\n        location: {\n          lat,\n          lng\n        }\n      }\n    } = result;\n    const coordinates = {\n      lat,\n      lng\n    };\n    return _Promise.resolve(coordinates);\n  }\n\n}","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/services/google/geocoder/index.js"],"names":["axios","GeoCoder","constructor","apiKey","debug","language","region","GOOGLE_API_URL","log","message","warn","console","handleUrl","url","response","get","catch","reject","Error","data","status","statusText","fromAddress","address","city","location","encodeURIComponent","results","result","geometry","lat","lng","coordinates","resolve"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAN,CAAe;AACpBC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAK,GAAG,KAAlB;AAAyBC,IAAAA,QAAzB;AAAmCC,IAAAA;AAAnC,GAAF,EAA+C;AACxD,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,cAAL,GAAsB,+CAAtB;AACD;;AAEDC,EAAAA,GAAG,CAAEC,OAAF,EAAWC,IAAI,GAAG,KAAlB,EAAyB;AAC1B,QAAI,KAAKN,KAAT,EAAgB;AACd,UAAIM,IAAJ,EAAU;AACRC,QAAAA,OAAO,CAACD,IAAR,CAAaD,OAAb;AACD,OAFD,MAEO;AACLE,QAAAA,OAAO,CAACH,GAAR,CAAYC,OAAZ;AACD;AACF;AACF;;AAED,QAAMG,SAAN,CAAiBC,GAAjB,EAAsB;AACpB,UAAMC,QAAQ,GAAG,MAAMd,KAAK,CACzBe,GADoB,CAChBF,GADgB,EAEpBG,KAFoB,CAEd,MAAM,SAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,qBAAV,CAAf,CAFQ,CAAvB;;AAGA,QAAIJ,QAAQ,CAACK,IAAT,CAAcC,MAAd,KAAyB,IAA7B,EAAmC;AACjC,WAAKZ,GAAL,CAASM,QAAQ,CAACK,IAAlB;AACA,aAAOL,QAAQ,CAACK,IAAhB;AACD;;AACD,SAAKX,GAAL,CAAU,GAAEM,QAAQ,CAACO,UAAW,kCAAiCP,QAAQ,CAACO,UAAW,EAArF,EAAwF,IAAxF;AACA,WAAO,SAAQJ,MAAR,CACL,IAAIC,KAAJ,CAAW,GAAEJ,QAAQ,CAACO,UAAW,kCAAiCP,QAAQ,CAACO,UAAW,EAAtF,CADK,CAAP;AAGD;AAED;;;;;;;AAKA,QAAMC,WAAN,CAAmB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAI,GAAG;AAAlB,GAAnB,EAA2C;AACzC,QAAI,CAACD,OAAL,EAAc;AACZ,WAAKf,GAAL,CAAS,6BAAT,EAAwC,IAAxC;AACA,aAAO,SAAQS,MAAR,CAAe,IAAIC,KAAJ,CAAU,6BAAV,CAAf,CAAP;AACD;;AAED,UAAMO,QAAQ,GAAGC,kBAAkB,CAACF,IAAI,GAAG,IAAP,GAAcD,OAAf,CAAnC;AAEA,QAAIV,GAAG,GAAI,GAAE,KAAKN,cAAe,YAAWkB,QAAS,EAArD;;AAEA,QAAI,KAAKtB,MAAT,EAAiB;AACfU,MAAAA,GAAG,IAAK,QAAO,KAAKV,MAAO,EAA3B;AACD;;AAED,QAAI,KAAKE,QAAT,EAAmB;AACjBQ,MAAAA,GAAG,IAAK,aAAY,KAAKR,QAAS,EAAlC;AACD;;AAED,QAAI,KAAKC,MAAT,EAAiB;AACfO,MAAAA,GAAG,IAAK,WAAUa,kBAAkB,CAAC,KAAKpB,MAAN,CAAc,EAAlD;AACD;;AAED,UAAM;AACJqB,MAAAA,OAAO,EAAE,CAACC,MAAD;AADL,QAEF,MAAM,KAAKhB,SAAL,CAAeC,GAAf,CAFV;AAGA,UAAM;AACJgB,MAAAA,QAAQ,EAAE;AACRJ,QAAAA,QAAQ,EAAE;AAAEK,UAAAA,GAAF;AAAOC,UAAAA;AAAP;AADF;AADN,QAIFH,MAJJ;AAMA,UAAMI,WAAW,GAAG;AAAEF,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAApB;AACA,WAAO,SAAQE,OAAR,CAAgBD,WAAhB,CAAP;AACD;;AAvEmB","sourcesContent":["// axios\nimport axios from 'axios'\n\nexport class GeoCoder {\n  constructor ({ apiKey, debug = false, language, region }) {\n    this.apiKey = apiKey\n    this.debug = debug\n    this.language = language\n    this.region = region\n    this.GOOGLE_API_URL = 'https://maps.google.com/maps/api/geocode/json'\n  }\n\n  log (message, warn = false) {\n    if (this.debug) {\n      if (warn) {\n        console.warn(message)\n      } else {\n        console.log(message)\n      }\n    }\n  }\n\n  async handleUrl (url) {\n    const response = await axios\n      .get(url)\n      .catch(() => Promise.reject(new Error('Error fetching data')))\n    if (response.data.status === 'OK') {\n      this.log(response.data)\n      return response.data\n    }\n    this.log(`${response.statusText}.\\nServer returned status code ${response.statusText}`, true)\n    return Promise.reject(\n      new Error(`${response.statusText}.\\nServer returned status code ${response.statusText}`)\n    )\n  }\n\n  /**\n   *\n   * @param {Object}\n   * @returns {Promise}\n   */\n  async fromAddress ({ address, city = '' }) {\n    if (!address) {\n      this.log('Provided address is invalid', true)\n      return Promise.reject(new Error('Provided address is invalid'))\n    }\n\n    const location = encodeURIComponent(city + ', ' + address)\n\n    let url = `${this.GOOGLE_API_URL}?address=${location}`\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`\n    }\n\n    if (this.region) {\n      url += `&region=${encodeURIComponent(this.region)}`\n    }\n\n    const {\n      results: [result]\n    } = await this.handleUrl(url)\n    const {\n      geometry: {\n        location: { lat, lng }\n      }\n    } = result\n\n    const coordinates = { lat, lng }\n    return Promise.resolve(coordinates)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}