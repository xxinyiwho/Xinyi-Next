{"ast":null,"code":"var _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/blog/sidebar/tag-cloud.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/**\n * Blog - Tag Cloud\n * List the 20 most prominent tags from all the articles.\n *\n * - Collate all the tags from all the articles\n * - Choose the top 20 most prominent tags\n * - Provide each a weight based on how many there are\n * - Randomly show them in a cloud\n */\n// React\nimport { useEffect, useState } from 'react';\nimport { array, number } from 'prop-types'; // Lodash\n// import countBy from 'lodash/countBy'\n// UI\n\nimport { slugify } from \"../../\";\nimport { BlogSection } from \"./components\";\nexport const BlogTagCloud = ({\n  articles,\n  total\n}) => {\n  const {\n    0: cloud,\n    1: setCloud\n  } = useState([]);\n  useEffect(() => {\n    setCloud(_find());\n  }, []);\n\n  const _find = () => {\n    const tagArray = [];\n    articles.map(({\n      tags\n    }) => {\n      if (!tags) {\n        return [];\n      }\n\n      for (var tag of tags) {\n        tagArray.push(slugify(tag));\n      }\n    }); // const tagsCounted = countBy(tagArray)\n    // Sort\n    // const tagsSorted = Object\n    //   .entries(tagsCounted)\n    //   .sort((a, b) => { return tagsCounted[b] - tagsCounted[a] })\n    //   // .map(key => {\n    //   //   key\n    //   // })\n    // newO[key] = list[key]\n    // return countBy(tagArray)\n    // .filter((article) => {\n    //   return (article.category !== 'terms' && article.homepage !== false)\n    // })\n    // .sort((a, b) => {\n    //   return new Date(b.date) - new Date(a.date)\n    // })\n    // .slice(0, total)\n    // .map((opt) => ({\n    //   tag: 'Deliveroo',\n    //   count: 10\n    // }))\n  }; // const data = [\n  //   { value: 'JavaScript', count: 38 },\n  //   { value: 'React', count: 30 },\n  //   { value: 'Nodejs', count: 28 },\n  //   { value: 'Express.js', count: 25 },\n  //   { value: 'HTML5', count: 33 },\n  //   { value: 'MongoDB', count: 18 },\n  //   { value: 'CSS3', count: 20 }\n  // ]\n\n\n  return __jsx(BlogSection, {\n    heading: \"Tags\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, cloud);\n};\nBlogTagCloud.propTypes = {\n  articles: array.isRequired,\n  total: number\n};\nBlogTagCloud.defaultProps = {\n  total: 5\n}; // .#{ $module } {\n//   clear: both;\n//   margin-bottom: 19px;\n//   // Label\n//   //--------------------------------------------------------------------------//\n//   .label {\n//     border-radius: 0;\n//     display: inline-block;\n//     line-height: 140%;\n//     &:hover {\n//       background-color: #CAC7C7;\n//       color: #000;\n//     }\n//   }\n//   // Tag\n//   //--------------------------------------------------------------------------//\n//   &__tag {\n//     margin-bottom: 4px;\n//     margin-right: 5px;\n//     vertical-align: baseline;\n//   }\n// <%\n// sizeMin = 80\n// sizeMax = 200\n// precision = 0\n// unit = '%'\n// threshold = locals[:threshold] || 1\n// total = 20\n// %>\n// <%# Tag map %>\n// <% tagMap = blog(blog).tags.map do |tag, articles| %>\n//   <% [tag, articles.count] if articles.count >= threshold %>\n// <% end %>\n// <% tagMap = tagMap.compact.sort_by{|k, v| v}.reverse[0...total] %>\n// <%# Shuffling the tags means a complete re-write each time %>\n// <%# tagMap = tagMap.compact.sort_by{ | k, v | v }.reverse[ 0...total ].shuffle %>\n// <% min, max = tagMap.map( &:last ).minmax %>\n// <section class=\"tag-cloud\">\n//   <div class=\"tag-cloud__tags\">\n//     <% tagMap.each do |tag, count| %>\n//       <% weight = (Math.log(count) - Math.log(min)) / (Math.log(max) - Math.log(min)) %>\n//       <% fontSize = sprintf(\"%.#{precision}f\", sizeMin + ((sizeMax - sizeMin) * weight).to_f) %>\n//       <% link_to(tag_path(tag, blog), class: 'tag-cloud__tag label label-info', style: \"font-size: #{fontSize}#{unit}\") do %>\n//         <%= tag %>\n//       <% end %>\n//     <% end %>\n//   </div>\n// </section>","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/blog/sidebar/tag-cloud.js"],"names":["useEffect","useState","array","number","slugify","BlogSection","BlogTagCloud","articles","total","cloud","setCloud","_find","tagArray","map","tags","tag","push","propTypes","isRequired","defaultProps"],"mappings":";;;;AAAA;;;;;;;;;AAUA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,YAA9B,C,CAEA;AACA;AAEA;;AACA,SAASC,OAAT;AACA,SAASC,WAAT;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAyB;AACnD,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ,CAACC,KAAK,EAAN,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,KAAK,GAAG,MAAM;AAClB,UAAMC,QAAQ,GAAG,EAAjB;AAEAL,IAAAA,QAAQ,CAACM,GAAT,CAAa,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACzB,UAAI,CAACA,IAAL,EAAW;AACT,eAAO,EAAP;AACD;;AAED,WAAK,IAAIC,GAAT,IAAgBD,IAAhB,EAAsB;AACpBF,QAAAA,QAAQ,CAACI,IAAT,CAAcZ,OAAO,CAACW,GAAD,CAArB;AACD;AACF,KARD,EAHkB,CAalB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAtCD,CAPmD,CA+CnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAO,MAAC,WAAD;AAAa,IAAA,OAAO,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BN,KAA7B,CAAP;AACD,CA1DM;AA4DPH,YAAY,CAACW,SAAb,GAAyB;AACvBV,EAAAA,QAAQ,EAAEL,KAAK,CAACgB,UADO;AAEvBV,EAAAA,KAAK,EAAEL;AAFgB,CAAzB;AAKAG,YAAY,CAACa,YAAb,GAA4B;AAC1BX,EAAAA,KAAK,EAAE;AADmB,CAA5B,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA","sourcesContent":["/**\n * Blog - Tag Cloud\n * List the 20 most prominent tags from all the articles.\n *\n * - Collate all the tags from all the articles\n * - Choose the top 20 most prominent tags\n * - Provide each a weight based on how many there are\n * - Randomly show them in a cloud\n */\n\n// React\nimport { useEffect, useState } from 'react'\nimport { array, number } from 'prop-types'\n\n// Lodash\n// import countBy from 'lodash/countBy'\n\n// UI\nimport { slugify } from '../../'\nimport { BlogSection } from './components'\n\nexport const BlogTagCloud = ({ articles, total }) => {\n  const [cloud, setCloud] = useState([])\n\n  useEffect(() => {\n    setCloud(_find())\n  }, [])\n\n  const _find = () => {\n    const tagArray = []\n\n    articles.map(({ tags }) => {\n      if (!tags) {\n        return []\n      }\n\n      for (var tag of tags) {\n        tagArray.push(slugify(tag))\n      }\n    })\n\n    // const tagsCounted = countBy(tagArray)\n\n    // Sort\n    // const tagsSorted = Object\n    //   .entries(tagsCounted)\n    //   .sort((a, b) => { return tagsCounted[b] - tagsCounted[a] })\n    //   // .map(key => {\n    //   //   key\n    //   // })\n\n    // newO[key] = list[key]\n\n    // return countBy(tagArray)\n\n    // .filter((article) => {\n    //   return (article.category !== 'terms' && article.homepage !== false)\n    // })\n    // .sort((a, b) => {\n    //   return new Date(b.date) - new Date(a.date)\n    // })\n    // .slice(0, total)\n    // .map((opt) => ({\n    //   tag: 'Deliveroo',\n    //   count: 10\n    // }))\n  }\n\n  // const data = [\n  //   { value: 'JavaScript', count: 38 },\n  //   { value: 'React', count: 30 },\n  //   { value: 'Nodejs', count: 28 },\n  //   { value: 'Express.js', count: 25 },\n  //   { value: 'HTML5', count: 33 },\n  //   { value: 'MongoDB', count: 18 },\n  //   { value: 'CSS3', count: 20 }\n  // ]\n\n  return <BlogSection heading='Tags'>{cloud}</BlogSection>\n}\n\nBlogTagCloud.propTypes = {\n  articles: array.isRequired,\n  total: number\n}\n\nBlogTagCloud.defaultProps = {\n  total: 5\n}\n\n// .#{ $module } {\n//   clear: both;\n//   margin-bottom: 19px;\n//   // Label\n//   //--------------------------------------------------------------------------//\n//   .label {\n//     border-radius: 0;\n//     display: inline-block;\n//     line-height: 140%;\n\n//     &:hover {\n//       background-color: #CAC7C7;\n//       color: #000;\n//     }\n//   }\n\n//   // Tag\n//   //--------------------------------------------------------------------------//\n//   &__tag {\n//     margin-bottom: 4px;\n//     margin-right: 5px;\n//     vertical-align: baseline;\n//   }\n\n// <%\n// sizeMin = 80\n// sizeMax = 200\n// precision = 0\n// unit = '%'\n// threshold = locals[:threshold] || 1\n// total = 20\n// %>\n\n// <%# Tag map %>\n// <% tagMap = blog(blog).tags.map do |tag, articles| %>\n//   <% [tag, articles.count] if articles.count >= threshold %>\n// <% end %>\n\n// <% tagMap = tagMap.compact.sort_by{|k, v| v}.reverse[0...total] %>\n\n// <%# Shuffling the tags means a complete re-write each time %>\n// <%# tagMap = tagMap.compact.sort_by{ | k, v | v }.reverse[ 0...total ].shuffle %>\n\n// <% min, max = tagMap.map( &:last ).minmax %>\n\n// <section class=\"tag-cloud\">\n\n//   <div class=\"tag-cloud__tags\">\n\n//     <% tagMap.each do |tag, count| %>\n//       <% weight = (Math.log(count) - Math.log(min)) / (Math.log(max) - Math.log(min)) %>\n//       <% fontSize = sprintf(\"%.#{precision}f\", sizeMin + ((sizeMax - sizeMin) * weight).to_f) %>\n\n//       <% link_to(tag_path(tag, blog), class: 'tag-cloud__tag label label-info', style: \"font-size: #{fontSize}#{unit}\") do %>\n//         <%= tag %>\n//       <% end %>\n\n//     <% end %>\n\n//   </div>\n\n// </section>\n"]},"metadata":{},"sourceType":"module"}