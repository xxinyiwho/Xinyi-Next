{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Hooks - useForm\n *\n * Handle all input changes and allows the pushing in of toggle resets, this could be an array based\n * on one trigger\n *\n * @Usage\n * [{ trigger: 'councilToggle', reset: ['license'] }]\n */\nimport { useState } from 'react';\nexport var useForm = function useForm(initialState, reset) {\n  var _useState = useState(initialState),\n      form = _useState[0],\n      setForm = _useState[1];\n\n  var clear = function clear(id) {\n    setForm(_objectSpread({}, form, _defineProperty({}, id, '')));\n  };\n\n  var change = function change(e) {\n    var _e$target = e.target,\n        checked = _e$target.checked,\n        id = _e$target.id,\n        type = _e$target.type,\n        value = _e$target.value;\n    var doReset = null;\n    var v = false;\n\n    if (reset) {\n      doReset = reset.find(function (el) {\n        return el.trigger === id;\n      });\n\n      if (doReset) {\n        doReset = _objectSpread({}, _Object$assign.apply(Object, _toConsumableArray(doReset.reset.map(function (d) {\n          return _defineProperty({}, d, '');\n        }))));\n      }\n    }\n\n    v = type === 'checkbox' ? checked : value;\n    setForm(_objectSpread({}, form, _defineProperty({}, id, v), doReset));\n  };\n\n  return {\n    change: change,\n    form: form,\n    setForm: setForm,\n    clear: clear\n  };\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/hooks/useForm/form.js"],"names":["useState","useForm","initialState","reset","form","setForm","clear","id","change","e","target","checked","type","value","doReset","v","find","el","trigger","Object","map","d"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;AAUA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,YAAD,EAAeC,KAAf,EAAyB;AAAA,kBACtBH,QAAQ,CAACE,YAAD,CADc;AAAA,MACvCE,IADuC;AAAA,MACjCC,OADiC;;AAG9C,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,EAAE,EAAI;AAClBF,IAAAA,OAAO,mBAAMD,IAAN,sBAAaG,EAAb,EAAkB,EAAlB,GAAP;AACD,GAFD;;AAIA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,CAAC,EAAI;AAAA,oBACmBA,CAAC,CAACC,MADrB;AAAA,QACVC,OADU,aACVA,OADU;AAAA,QACDJ,EADC,aACDA,EADC;AAAA,QACGK,IADH,aACGA,IADH;AAAA,QACSC,KADT,aACSA,KADT;AAGlB,QAAIC,OAAO,GAAG,IAAd;AACA,QAAIC,CAAC,GAAG,KAAR;;AAEA,QAAIZ,KAAJ,EAAW;AACTW,MAAAA,OAAO,GAAGX,KAAK,CAACa,IAAN,CAAW,UAAAC,EAAE;AAAA,eAAIA,EAAE,CAACC,OAAH,KAAeX,EAAnB;AAAA,OAAb,CAAV;;AAEA,UAAIO,OAAJ,EAAa;AACXA,QAAAA,OAAO,qBAAQ,qBAAAK,MAAM,qBAAWL,OAAO,CAACX,KAAR,CAAciB,GAAd,CAAkB,UAAAC,CAAC;AAAA,qCAAQA,CAAR,EAAY,EAAZ;AAAA,SAAnB,CAAX,EAAd,CAAP;AACD;AACF;;AAEDN,IAAAA,CAAC,GAAGH,IAAI,KAAK,UAAT,GAAsBD,OAAtB,GAAgCE,KAApC;AAEAR,IAAAA,OAAO,mBAAMD,IAAN,sBAAaG,EAAb,EAAkBQ,CAAlB,GAAwBD,OAAxB,EAAP;AACD,GAjBD;;AAmBA,SAAO;AAAEN,IAAAA,MAAM,EAANA,MAAF;AAAUJ,IAAAA,IAAI,EAAJA,IAAV;AAAgBC,IAAAA,OAAO,EAAPA,OAAhB;AAAyBC,IAAAA,KAAK,EAALA;AAAzB,GAAP;AACD,CA3BM","sourcesContent":["/**\n * Hooks - useForm\n *\n * Handle all input changes and allows the pushing in of toggle resets, this could be an array based\n * on one trigger\n *\n * @Usage\n * [{ trigger: 'councilToggle', reset: ['license'] }]\n */\n\nimport { useState } from 'react'\n\nexport const useForm = (initialState, reset) => {\n  const [form, setForm] = useState(initialState)\n\n  const clear = id => {\n    setForm({ ...form, [id]: '' })\n  }\n\n  const change = e => {\n    const { checked, id, type, value } = e.target\n\n    let doReset = null\n    let v = false\n\n    if (reset) {\n      doReset = reset.find(el => el.trigger === id)\n\n      if (doReset) {\n        doReset = { ...Object.assign(...doReset.reset.map(d => ({ [d]: '' }))) }\n      }\n    }\n\n    v = type === 'checkbox' ? checked : value\n\n    setForm({ ...form, [id]: v, ...doReset })\n  }\n\n  return { change, form, setForm, clear }\n}\n"]},"metadata":{},"sourceType":"module"}