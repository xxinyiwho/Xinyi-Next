{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n// axios\nimport axios from 'axios';\nexport var GeoCoder =\n/*#__PURE__*/\nfunction () {\n  function GeoCoder(_ref) {\n    var apiKey = _ref.apiKey,\n        _ref$debug = _ref.debug,\n        debug = _ref$debug === void 0 ? false : _ref$debug,\n        language = _ref.language,\n        region = _ref.region;\n\n    _classCallCheck(this, GeoCoder);\n\n    this.apiKey = apiKey;\n    this.debug = debug;\n    this.language = language;\n    this.region = region;\n    this.GOOGLE_API_URL = 'https://maps.google.com/maps/api/geocode/json';\n  }\n\n  _createClass(GeoCoder, [{\n    key: \"log\",\n    value: function log(message) {\n      var warn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.debug) {\n        if (warn) {\n          console.warn(message);\n        } else {\n          console.log(message);\n        }\n      }\n    }\n  }, {\n    key: \"handleUrl\",\n    value: function handleUrl(url) {\n      var response;\n      return _regeneratorRuntime.async(function handleUrl$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(url)[\"catch\"](function () {\n                return _Promise.reject(new Error('Error fetching data'));\n              }));\n\n            case 2:\n              response = _context.sent;\n\n              if (!(response.data.status === 'OK')) {\n                _context.next = 6;\n                break;\n              }\n\n              this.log(response.data);\n              return _context.abrupt(\"return\", response.data);\n\n            case 6:\n              this.log(\"\".concat(response.statusText, \".\\nServer returned status code \").concat(response.statusText), true);\n              return _context.abrupt(\"return\", _Promise.reject(new Error(\"\".concat(response.statusText, \".\\nServer returned status code \").concat(response.statusText))));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n    /**\n     *\n     * @param {Object}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"fromAddress\",\n    value: function fromAddress(_ref2) {\n      var address, _ref2$city, city, location, url, _ref3, _ref3$results, result, _result$geometry$loca, lat, lng, coordinates;\n\n      return _regeneratorRuntime.async(function fromAddress$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              address = _ref2.address, _ref2$city = _ref2.city, city = _ref2$city === void 0 ? '' : _ref2$city;\n\n              if (address) {\n                _context2.next = 4;\n                break;\n              }\n\n              this.log('Provided address is invalid', true);\n              return _context2.abrupt(\"return\", _Promise.reject(new Error('Provided address is invalid')));\n\n            case 4:\n              location = encodeURIComponent(city + ', ' + address);\n              url = \"\".concat(this.GOOGLE_API_URL, \"?address=\").concat(location);\n\n              if (this.apiKey) {\n                url += \"&key=\".concat(this.apiKey);\n              }\n\n              if (this.language) {\n                url += \"&language=\".concat(this.language);\n              }\n\n              if (this.region) {\n                url += \"&region=\".concat(encodeURIComponent(this.region));\n              }\n\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(this.handleUrl(url));\n\n            case 11:\n              _ref3 = _context2.sent;\n              _ref3$results = _slicedToArray(_ref3.results, 1);\n              result = _ref3$results[0];\n              _result$geometry$loca = result.geometry.location, lat = _result$geometry$loca.lat, lng = _result$geometry$loca.lng;\n              coordinates = {\n                lat: lat,\n                lng: lng\n              };\n              return _context2.abrupt(\"return\", _Promise.resolve(coordinates));\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return GeoCoder;\n}();","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/services/google/geocoder/index.js"],"names":["axios","GeoCoder","apiKey","debug","language","region","GOOGLE_API_URL","message","warn","console","log","url","get","reject","Error","response","data","status","statusText","address","city","location","encodeURIComponent","handleUrl","results","result","geometry","lat","lng","coordinates","resolve"],"mappings":"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","sourcesContent":["// axios\nimport axios from 'axios'\n\nexport class GeoCoder {\n  constructor ({ apiKey, debug = false, language, region }) {\n    this.apiKey = apiKey\n    this.debug = debug\n    this.language = language\n    this.region = region\n    this.GOOGLE_API_URL = 'https://maps.google.com/maps/api/geocode/json'\n  }\n\n  log (message, warn = false) {\n    if (this.debug) {\n      if (warn) {\n        console.warn(message)\n      } else {\n        console.log(message)\n      }\n    }\n  }\n\n  async handleUrl (url) {\n    const response = await axios\n      .get(url)\n      .catch(() => Promise.reject(new Error('Error fetching data')))\n    if (response.data.status === 'OK') {\n      this.log(response.data)\n      return response.data\n    }\n    this.log(`${response.statusText}.\\nServer returned status code ${response.statusText}`, true)\n    return Promise.reject(\n      new Error(`${response.statusText}.\\nServer returned status code ${response.statusText}`)\n    )\n  }\n\n  /**\n   *\n   * @param {Object}\n   * @returns {Promise}\n   */\n  async fromAddress ({ address, city = '' }) {\n    if (!address) {\n      this.log('Provided address is invalid', true)\n      return Promise.reject(new Error('Provided address is invalid'))\n    }\n\n    const location = encodeURIComponent(city + ', ' + address)\n\n    let url = `${this.GOOGLE_API_URL}?address=${location}`\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`\n    }\n\n    if (this.region) {\n      url += `&region=${encodeURIComponent(this.region)}`\n    }\n\n    const {\n      results: [result]\n    } = await this.handleUrl(url)\n    const {\n      geometry: {\n        location: { lat, lng }\n      }\n    } = result\n\n    const coordinates = { lat, lng }\n    return Promise.resolve(coordinates)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}