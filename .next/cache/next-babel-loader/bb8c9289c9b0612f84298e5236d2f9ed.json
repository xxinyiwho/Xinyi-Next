{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/molecules/dropzone/components/dropzone.js\";\nvar __jsx = React.createElement;\n\n/**\n * Dropzone\n * Allows a user to Upload multiple images\n */\n// React\nimport React, { useCallback } from 'react';\nimport { bool, string } from 'prop-types'; // React Dropzone\n\nimport { useDropzone } from 'react-dropzone'; // UI\n// import { Button, Container, Column, Heading, Row } from '../../../'\n\nimport { Accept } from \"./accept\"; // import { DropzonePreview } from './'\n// Style\n\nimport styled from 'styled-components';\nexport const Dropzone = ({\n  accept,\n  disabled,\n  handleDrop\n}) => {\n  const onDrop = useCallback(acceptedFiles => {\n    handleDrop && handleDrop(acceptedFiles);\n  }, []);\n  const {\n    acceptedFiles,\n    rejectedFiles,\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: accept,\n    disabled: disabled,\n    onDrop\n  });\n  const acceptedFilesItems = acceptedFiles.map(file => __jsx(\"li\", {\n    key: file.path,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, file.path, \" - \", file.size, \" bytes\"));\n  const rejectedFilesItems = rejectedFiles.map(file => __jsx(\"li\", {\n    key: file.path,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, file.path, \" - \", file.size, \" bytes\"));\n  return __jsx(React.Fragment, null, __jsx(StyledContainer, _extends({\n    dragActive: isDragActive,\n    dragAccept: isDragAccept,\n    dragReject: isDragReject,\n    disabled: disabled\n  }, getRootProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), __jsx(\"input\", _extends({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), isDragAccept && __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"All files will be accepted\"), isDragReject && __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Some files will be rejected\"), isDragActive ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Drop the files here ...\") : __jsx(React.Fragment, null, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Drag 'n' drop some files here, or click to select files\"), accept && __jsx(Accept, {\n    accept: accept,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))), __jsx(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Accepted files\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, acceptedFilesItems), __jsx(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Rejected files\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, rejectedFilesItems)));\n};\nconst StyledContainer = styled.div.withConfig({\n  displayName: \"dropzone__StyledContainer\",\n  componentId: \"n92dx7-0\"\n})([\"background-color:\", \";border-color:\", \";border-radius:0.25rem;border-style:\", \";border-width:2px;cursor:pointer;margin-bottom:1rem;height:25vh;padding:1rem;outline:none;overflow:auto;text-align:center;transition:border 0.24s ease-in-out;width:100%;\"], ({\n  disabled,\n  theme\n}) => disabled ? theme.COLOUR.warning : theme.COLOUR.light, ({\n  dragAccept,\n  dragReject,\n  theme\n}) => dragReject && theme.COLOUR.warning || dragAccept && theme.COLOUR.success, ({\n  dragActive\n}) => dragActive ? 'solid' : 'dashed');\nDropzone.propTypes = {\n  accept: string,\n  disabled: bool\n};\nDropzone.defaultProps = {\n  accept: 'image/jpeg, image/png',\n  disabled: false\n}; //   static propTypes = {\n//     accepted: oneOfType([array, object]),\n//     handleDrop: func,\n//     handleRemove: func,\n//     number: number\n//   }\n//   static defaultProps = {\n//     number: 4\n//   }\n//   componentWillUnmount () {\n//     this.cleanup()\n//   }\n//   cleanup = () => {\n//     // Revoke data uris when done using the previews\n//     const { accepted } = this.props\n//     for (const file of accepted) {\n//       URL.revokeObjectURL(file.preview)\n//     }\n//   }\n//   previewList = () => {\n//     const { accepted, handleRemove } = this.props\n//     return accepted.map((file, index) => (\n//       <Column key={index} md={2} style={{ marginBottom: '20px' }}>\n//         <DropzonePreview file={file} handleRemove={handleRemove} index={index} />\n//       </Column>\n//     ))\n//   }\n//   render () {\n//     const { accepted, disabled, handleDrop } = this.props\n//     return (\n//       <ReactDropzone\n//         accept='image/jpeg, image/png'\n//         disabled={disabled}\n//         maxSize={5000000}\n//         onDrop={handleDrop}\n//       >\n//         {({\n//           getRootProps,\n//           getInputProps,\n//           isDragActive,\n//           isDragAccept,\n//           isDragReject,\n//           acceptedFiles,\n//           rejectedFiles\n//         }) => (\n//           <StyledContainer\n//             disabled={disabled}\n//             isDragActive={isDragActive}\n//             isDragReject={isDragReject}\n//             {...getRootProps()}\n//           >\n//             <Container>\n//               <Row>\n//                 <input {...getInputProps()} />\n//                 {accepted.length > 0 && this.previewList()}\n//                 {accepted.length <= 0 && (\n//                   <Column md={12}>\n//                     <Heading tag='h2'>\n//                       Drag &amp; Drop images here\n//                       <br />\n//                       <small>or</small>\n//                       <br />\n//                     </Heading>\n//                     <Button content='Select files' size='lg' />\n//                   </Column>\n//                 )}\n//               </Row>\n//             </Container>\n//           </StyledContainer>\n//         )}\n//       </ReactDropzone>\n//     )\n//   }\n// }","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/molecules/dropzone/components/dropzone.js"],"names":["React","useCallback","bool","string","useDropzone","Accept","styled","Dropzone","accept","disabled","handleDrop","onDrop","acceptedFiles","rejectedFiles","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","acceptedFilesItems","map","file","path","size","rejectedFilesItems","StyledContainer","div","theme","COLOUR","warning","light","dragAccept","dragReject","success","dragActive","propTypes","defaultProps"],"mappings":"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","sourcesContent":["/**\n * Dropzone\n * Allows a user to Upload multiple images\n */\n\n// React\nimport React, { useCallback } from 'react'\nimport { bool, string } from 'prop-types'\n\n// React Dropzone\nimport { useDropzone } from 'react-dropzone'\n\n// UI\n// import { Button, Container, Column, Heading, Row } from '../../../'\nimport { Accept } from './accept'\n// import { DropzonePreview } from './'\n\n// Style\nimport styled from 'styled-components'\n\nexport const Dropzone = ({ accept, disabled, handleDrop }) => {\n  const onDrop = useCallback(acceptedFiles => {\n    handleDrop && handleDrop(acceptedFiles)\n  }, [])\n\n  const {\n    acceptedFiles,\n    rejectedFiles,\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: accept,\n    disabled: disabled,\n    onDrop\n  })\n\n  const acceptedFilesItems = acceptedFiles.map(file => (\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ))\n\n  const rejectedFilesItems = rejectedFiles.map(file => (\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ))\n\n  return (\n    <>\n      <StyledContainer\n        dragActive={isDragActive}\n        dragAccept={isDragAccept}\n        dragReject={isDragReject}\n        disabled={disabled}\n        {...getRootProps()}\n      >\n        <input {...getInputProps()} />\n        {isDragAccept && <p>All files will be accepted</p>}\n        {isDragReject && <p>Some files will be rejected</p>}\n\n        {isDragActive ? (\n          <p>Drop the files here ...</p>\n        ) : (\n          <>\n            <p>Drag 'n' drop some files here, or click to select files</p>\n            {accept && <Accept accept={accept} />}\n          </>\n        )}\n      </StyledContainer>\n\n      <aside>\n        <h4>Accepted files</h4>\n        <ul>{acceptedFilesItems}</ul>\n        <h4>Rejected files</h4>\n        <ul>{rejectedFilesItems}</ul>\n      </aside>\n    </>\n  )\n}\n\nconst StyledContainer = styled.div`\n  background-color: ${({ disabled, theme }) =>\n    disabled ? theme.COLOUR.warning : theme.COLOUR.light};\n  border-color: ${({ dragAccept, dragReject, theme }) =>\n    (dragReject && theme.COLOUR.warning) || (dragAccept && theme.COLOUR.success)};\n  border-radius: 0.25rem;\n  border-style: ${({ dragActive }) => (dragActive ? 'solid' : 'dashed')};\n  border-width: 2px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n  height: 25vh;\n  padding: 1rem;\n  outline: none;\n  overflow: auto;\n  text-align: center;\n  transition: border 0.24s ease-in-out;\n  width: 100%;\n`\n\nDropzone.propTypes = {\n  accept: string,\n  disabled: bool\n}\n\nDropzone.defaultProps = {\n  accept: 'image/jpeg, image/png',\n  disabled: false\n}\n\n//   static propTypes = {\n//     accepted: oneOfType([array, object]),\n//     handleDrop: func,\n//     handleRemove: func,\n//     number: number\n//   }\n\n//   static defaultProps = {\n//     number: 4\n//   }\n\n//   componentWillUnmount () {\n//     this.cleanup()\n//   }\n\n//   cleanup = () => {\n//     // Revoke data uris when done using the previews\n//     const { accepted } = this.props\n\n//     for (const file of accepted) {\n//       URL.revokeObjectURL(file.preview)\n//     }\n//   }\n\n//   previewList = () => {\n//     const { accepted, handleRemove } = this.props\n\n//     return accepted.map((file, index) => (\n//       <Column key={index} md={2} style={{ marginBottom: '20px' }}>\n//         <DropzonePreview file={file} handleRemove={handleRemove} index={index} />\n//       </Column>\n//     ))\n//   }\n\n//   render () {\n//     const { accepted, disabled, handleDrop } = this.props\n\n//     return (\n//       <ReactDropzone\n//         accept='image/jpeg, image/png'\n//         disabled={disabled}\n//         maxSize={5000000}\n//         onDrop={handleDrop}\n//       >\n//         {({\n//           getRootProps,\n//           getInputProps,\n//           isDragActive,\n//           isDragAccept,\n//           isDragReject,\n//           acceptedFiles,\n//           rejectedFiles\n//         }) => (\n//           <StyledContainer\n//             disabled={disabled}\n//             isDragActive={isDragActive}\n//             isDragReject={isDragReject}\n//             {...getRootProps()}\n//           >\n//             <Container>\n//               <Row>\n//                 <input {...getInputProps()} />\n\n//                 {accepted.length > 0 && this.previewList()}\n\n//                 {accepted.length <= 0 && (\n//                   <Column md={12}>\n//                     <Heading tag='h2'>\n//                       Drag &amp; Drop images here\n//                       <br />\n//                       <small>or</small>\n//                       <br />\n//                     </Heading>\n\n//                     <Button content='Select files' size='lg' />\n//                   </Column>\n//                 )}\n//               </Row>\n//             </Container>\n//           </StyledContainer>\n//         )}\n//       </ReactDropzone>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}