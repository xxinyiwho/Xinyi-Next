{"ast":null,"code":"var _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/social/typeform/typeformEmbed.js\";\nvar __jsx = React.createElement;\n\n/**\n * Typeform\n *\n * @see https://stackoverflow.com/questions/42088122/how-to-detect-user-has-completed-embedded-typeform\n */\n// React\nimport React, { useEffect, useRef } from 'react';\nimport { string, shape, number, func, bool, object } from 'prop-types';\nexport const Typeform = ({\n  options,\n  style,\n  url\n}) => {\n  const typeformRef = useRef();\n  useEffect(() => {\n    const typeformEmbed = require('@typeform/embed'); // Load Typeform embed widget\n\n\n    typeformEmbed.makeWidget(typeformRef.current, url, options);\n  }, []);\n  return __jsx(\"div\", {\n    className: \"ReactTypeformEmbed\",\n    ref: typeformRef,\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  });\n};\nTypeform.propTypes = {\n  url: string.isRequired,\n  options: shape({\n    autoClose: bool,\n    autoOpen: bool,\n    buttonText: string,\n    hideHeaders: bool,\n    hideFooter: bool,\n    mode: string,\n    onSubmit: func,\n    opacity: number,\n    popup: bool\n  }),\n  style: object\n}; // Default values taken from official Typeform docs\n// https://developer.typeform.com/embed/modes/\n\nTypeform.defaultProps = {\n  url: '',\n  options: {\n    popup: false,\n    hideHeaders: false,\n    hideFooter: false,\n    onSubmit: () => {},\n    // Widget options\n    opacity: 100,\n    buttonText: 'Start',\n    // Popup options\n    mode: 'popup',\n    // options: \"popup\", \"drawer_left\", \"drawer_right\"\n    autoOpen: false\n  }\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/social/typeform/typeformEmbed.js"],"names":["React","useEffect","useRef","string","shape","number","func","bool","object","Typeform","options","style","url","typeformRef","typeformEmbed","require","makeWidget","current","propTypes","isRequired","autoClose","autoOpen","buttonText","hideHeaders","hideFooter","mode","onSubmit","opacity","popup","defaultProps"],"mappings":";;;AAAA;;;;;AAMA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4CC,MAA5C,QAA0D,YAA1D;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAD,KAA6B;AACnD,QAAMC,WAAW,GAAGX,MAAM,EAA1B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B,CADc,CAEd;;;AACAD,IAAAA,aAAa,CAACE,UAAd,CAAyBH,WAAW,CAACI,OAArC,EAA8CL,GAA9C,EAAmDF,OAAnD;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,GAAG,EAAEG,WAAzC;AAAsD,IAAA,KAAK,EAAEF,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CATM;AAWPF,QAAQ,CAACS,SAAT,GAAqB;AACnBN,EAAAA,GAAG,EAAET,MAAM,CAACgB,UADO;AAEnBT,EAAAA,OAAO,EAAEN,KAAK,CAAC;AACbgB,IAAAA,SAAS,EAAEb,IADE;AAEbc,IAAAA,QAAQ,EAAEd,IAFG;AAGbe,IAAAA,UAAU,EAAEnB,MAHC;AAIboB,IAAAA,WAAW,EAAEhB,IAJA;AAKbiB,IAAAA,UAAU,EAAEjB,IALC;AAMbkB,IAAAA,IAAI,EAAEtB,MANO;AAObuB,IAAAA,QAAQ,EAAEpB,IAPG;AAQbqB,IAAAA,OAAO,EAAEtB,MARI;AASbuB,IAAAA,KAAK,EAAErB;AATM,GAAD,CAFK;AAanBI,EAAAA,KAAK,EAAEH;AAbY,CAArB,C,CAgBA;AACA;;AACAC,QAAQ,CAACoB,YAAT,GAAwB;AACtBjB,EAAAA,GAAG,EAAE,EADiB;AAEtBF,EAAAA,OAAO,EAAE;AACPkB,IAAAA,KAAK,EAAE,KADA;AAEPL,IAAAA,WAAW,EAAE,KAFN;AAGPC,IAAAA,UAAU,EAAE,KAHL;AAIPE,IAAAA,QAAQ,EAAE,MAAM,CAAE,CAJX;AAKP;AACAC,IAAAA,OAAO,EAAE,GANF;AAOPL,IAAAA,UAAU,EAAE,OAPL;AAQP;AACAG,IAAAA,IAAI,EAAE,OATC;AASQ;AACfJ,IAAAA,QAAQ,EAAE;AAVH;AAFa,CAAxB","sourcesContent":["/**\n * Typeform\n *\n * @see https://stackoverflow.com/questions/42088122/how-to-detect-user-has-completed-embedded-typeform\n */\n\n// React\nimport React, { useEffect, useRef } from 'react'\nimport { string, shape, number, func, bool, object } from 'prop-types'\n\nexport const Typeform = ({ options, style, url }) => {\n  const typeformRef = useRef()\n  useEffect(() => {\n    const typeformEmbed = require('@typeform/embed')\n    // Load Typeform embed widget\n    typeformEmbed.makeWidget(typeformRef.current, url, options)\n  }, [])\n\n  return <div className='ReactTypeformEmbed' ref={typeformRef} style={style} />\n}\n\nTypeform.propTypes = {\n  url: string.isRequired,\n  options: shape({\n    autoClose: bool,\n    autoOpen: bool,\n    buttonText: string,\n    hideHeaders: bool,\n    hideFooter: bool,\n    mode: string,\n    onSubmit: func,\n    opacity: number,\n    popup: bool\n  }),\n  style: object\n}\n\n// Default values taken from official Typeform docs\n// https://developer.typeform.com/embed/modes/\nTypeform.defaultProps = {\n  url: '',\n  options: {\n    popup: false,\n    hideHeaders: false,\n    hideFooter: false,\n    onSubmit: () => {},\n    // Widget options\n    opacity: 100,\n    buttonText: 'Start',\n    // Popup options\n    mode: 'popup', // options: \"popup\", \"drawer_left\", \"drawer_right\"\n    autoOpen: false\n  }\n}\n"]},"metadata":{},"sourceType":"module"}