{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\n\n/**\n * Google Static Map Service Class\n * Description: Generates an url for the static map\n * @param {Array} Obj.paths  // [{ color: '0x003753', geodesic: true, weight: '5', points: ['WC2E 9DD', 'SW1A']}]\n */\n// UI\nimport { encodeCircle } from \"./circle\";\nexport class StaticMap {\n  constructor({\n    apiKey,\n    center,\n    channel,\n    client,\n    format = 'png',\n    language,\n    location = '',\n    maptype = 'roadmap',\n    markers = [],\n    paths = [],\n    region,\n    rootURL = 'https://maps.googleapis.com/maps/api/staticmap',\n    scale = 1,\n    signature,\n    size = '400x200',\n    style,\n    visible,\n    zoom = 15\n  }) {\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.center = center;\n    this.client = client;\n    this.format = format;\n    this.language = language;\n    this.location = location;\n    this.maptype = maptype;\n    this.markers = markers;\n    this.paths = paths;\n    this.region = region;\n    this.rootURL = rootURL;\n    this.scale = scale;\n    this.signature = signature;\n    this.size = size;\n    this.style = style;\n    this.visible = visible;\n    this.zoom = zoom;\n  }\n\n  urlBuilder(property, value, separator) {\n    if (value) {\n      return `${property}${separator}${value}`;\n    }\n\n    return null;\n  }\n\n  renderBaseMap() {\n    const urlParts = [];\n    urlParts.push(this.urlBuilder('key', this.apiKey, '='));\n    urlParts.push(this.urlBuilder('center', this.center, '='));\n    urlParts.push(this.urlBuilder('channel', this.channel, '='));\n    urlParts.push(this.urlBuilder('client', this.client, '='));\n    urlParts.push(this.urlBuilder('format', this.format, '='));\n    urlParts.push(this.urlBuilder('language', this.language, '='));\n    urlParts.push(this.urlBuilder('maptype', this.maptype, '='));\n    urlParts.push(this.urlBuilder('region', this.region, '='));\n    urlParts.push(this.urlBuilder('scale', this.scale, '='));\n    urlParts.push(this.urlBuilder('signature', this.signature, '='));\n    urlParts.push(this.urlBuilder('size', this.size, '='));\n    urlParts.push(this.urlBuilder('style', this.style, '='));\n    urlParts.push(this.urlBuilder('visible', this.visible, '='));\n    urlParts.push(this.urlBuilder('zoom', this.zoom, '='));\n    const parts = urlParts.filter(x => x).join('&');\n    return `${this.rootURL}?${parts}`;\n  }\n\n  locationBuilder(location) {\n    const urlParts = [];\n\n    if (_Array$isArray(location)) {\n      const arrParts = location.map(val => this.locationBuilder(val));\n      urlParts.push(...arrParts);\n    }\n\n    if (typeof location === 'string' || typeof location === 'number') {\n      urlParts.push(encodeURI(location));\n    }\n\n    if (typeof location === 'object' && location.lat && location.lng) {\n      urlParts.push(`${location.lat},${location.lng}`);\n    }\n\n    return urlParts.join('%7C');\n  } // Create the URL segment for the Path\n\n\n  renderPath({\n    circle,\n    color,\n    fillcolor,\n    geodesic,\n    points,\n    weight\n  }) {\n    const urlParts = [];\n\n    if (circle) {\n      const enc = encodeCircle(circle.latitude, circle.longitude, circle.radius);\n      urlParts.push(this.urlBuilder('', this.locationBuilder(`${enc}`), ''));\n    }\n\n    urlParts.push(this.urlBuilder('color', color, ':'));\n    urlParts.push(this.urlBuilder('weight', weight, ':'));\n    urlParts.push(this.urlBuilder('fillcolor', fillcolor, ':'));\n    urlParts.push(this.urlBuilder('geodesic', geodesic, ':'));\n    urlParts.push(this.urlBuilder('', this.locationBuilder(points), ''));\n    const url = urlParts.filter(x => x).join('%7C');\n    return `path=${url}`;\n  }\n\n  renderParts() {\n    return this.paths.map(path => {\n      return this.renderPath(path);\n    });\n  }\n\n  renderMarkers() {\n    const {\n      markers,\n      locationBuilder,\n      location\n    } = this;\n    const urlParts = markers.length ? markers.map(marker => {\n      let markerUrl = 'markers=';\n\n      switch (typeof marker) {\n        case 'string':\n          {\n            markerUrl += locationBuilder(marker);\n            break;\n          }\n\n        case 'object':\n          {\n            const {\n              colour,\n              label,\n              location\n            } = marker;\n            const markerColour = colour && `color:${colour}|`;\n            const markerLabel = label && `label:${label}|`;\n            const markerLocation = location && `${locationBuilder(location)}|`;\n            markerUrl += markerColour + markerLabel + markerLocation;\n            break;\n          }\n      }\n\n      return markerUrl;\n    }) : [`markers=${locationBuilder(location)}`];\n    return urlParts.join('&');\n  }\n\n  generateUrl() {\n    const childrenUrlParts = this.renderParts() || [];\n    const mainUrlParts = this.renderBaseMap();\n    const markerParts = this.renderMarkers();\n    const url = `${mainUrlParts}&${childrenUrlParts}&${markerParts}`;\n    return url;\n  }\n\n}","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/services/google/static/map.js"],"names":["encodeCircle","StaticMap","constructor","apiKey","center","channel","client","format","language","location","maptype","markers","paths","region","rootURL","scale","signature","size","style","visible","zoom","urlBuilder","property","value","separator","renderBaseMap","urlParts","push","parts","filter","x","join","locationBuilder","arrParts","map","val","encodeURI","lat","lng","renderPath","circle","color","fillcolor","geodesic","points","weight","enc","latitude","longitude","radius","url","renderParts","path","renderMarkers","length","marker","markerUrl","colour","label","markerColour","markerLabel","markerLocation","generateUrl","childrenUrlParts","mainUrlParts","markerParts"],"mappings":";;AAAA;;;;;AAMA;AACA,SAASA,YAAT;AAEA,OAAO,MAAMC,SAAN,CAAgB;AACrBC,EAAAA,WAAW,CAAE;AACXC,IAAAA,MADW;AAEXC,IAAAA,MAFW;AAGXC,IAAAA,OAHW;AAIXC,IAAAA,MAJW;AAKXC,IAAAA,MAAM,GAAG,KALE;AAMXC,IAAAA,QANW;AAOXC,IAAAA,QAAQ,GAAG,EAPA;AAQXC,IAAAA,OAAO,GAAG,SARC;AASXC,IAAAA,OAAO,GAAG,EATC;AAUXC,IAAAA,KAAK,GAAG,EAVG;AAWXC,IAAAA,MAXW;AAYXC,IAAAA,OAAO,GAAG,gDAZC;AAaXC,IAAAA,KAAK,GAAG,CAbG;AAcXC,IAAAA,SAdW;AAeXC,IAAAA,IAAI,GAAG,SAfI;AAgBXC,IAAAA,KAhBW;AAiBXC,IAAAA,OAjBW;AAkBXC,IAAAA,IAAI,GAAG;AAlBI,GAAF,EAmBR;AACD,SAAKjB,MAAL,GAAcA,MAAd;AACA,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAEDC,EAAAA,UAAU,CAAEC,QAAF,EAAYC,KAAZ,EAAmBC,SAAnB,EAA8B;AACtC,QAAID,KAAJ,EAAW;AACT,aAAQ,GAAED,QAAS,GAAEE,SAAU,GAAED,KAAM,EAAvC;AACD;;AAED,WAAO,IAAP;AACD;;AAEDE,EAAAA,aAAa,GAAI;AACf,UAAMC,QAAQ,GAAG,EAAjB;AACAA,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,KAAhB,EAAuB,KAAKlB,MAA5B,EAAoC,GAApC,CAAd;AACAuB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,QAAhB,EAA0B,KAAKjB,MAA/B,EAAuC,GAAvC,CAAd;AACAsB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,SAAhB,EAA2B,KAAKhB,OAAhC,EAAyC,GAAzC,CAAd;AACAqB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,QAAhB,EAA0B,KAAKf,MAA/B,EAAuC,GAAvC,CAAd;AACAoB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,QAAhB,EAA0B,KAAKd,MAA/B,EAAuC,GAAvC,CAAd;AACAmB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,UAAhB,EAA4B,KAAKb,QAAjC,EAA2C,GAA3C,CAAd;AACAkB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,SAAhB,EAA2B,KAAKX,OAAhC,EAAyC,GAAzC,CAAd;AACAgB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,QAAhB,EAA0B,KAAKR,MAA/B,EAAuC,GAAvC,CAAd;AACAa,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,OAAhB,EAAyB,KAAKN,KAA9B,EAAqC,GAArC,CAAd;AACAW,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,WAAhB,EAA6B,KAAKL,SAAlC,EAA6C,GAA7C,CAAd;AACAU,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,MAAhB,EAAwB,KAAKJ,IAA7B,EAAmC,GAAnC,CAAd;AACAS,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,OAAhB,EAAyB,KAAKH,KAA9B,EAAqC,GAArC,CAAd;AACAQ,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,SAAhB,EAA2B,KAAKF,OAAhC,EAAyC,GAAzC,CAAd;AACAO,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,MAAhB,EAAwB,KAAKD,IAA7B,EAAmC,GAAnC,CAAd;AACA,UAAMQ,KAAK,GAAGF,QAAQ,CAACG,MAAT,CAAgBC,CAAC,IAAIA,CAArB,EAAwBC,IAAxB,CAA6B,GAA7B,CAAd;AACA,WAAQ,GAAE,KAAKjB,OAAQ,IAAGc,KAAM,EAAhC;AACD;;AAEDI,EAAAA,eAAe,CAAEvB,QAAF,EAAY;AACzB,UAAMiB,QAAQ,GAAG,EAAjB;;AAEA,QAAI,eAAcjB,QAAd,CAAJ,EAA6B;AAC3B,YAAMwB,QAAQ,GAAGxB,QAAQ,CAACyB,GAAT,CAAaC,GAAG,IAAI,KAAKH,eAAL,CAAqBG,GAArB,CAApB,CAAjB;AACAT,MAAAA,QAAQ,CAACC,IAAT,CAAc,GAAGM,QAAjB;AACD;;AAED,QAAI,OAAOxB,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;AAChEiB,MAAAA,QAAQ,CAACC,IAAT,CAAcS,SAAS,CAAC3B,QAAD,CAAvB;AACD;;AAED,QAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,CAAC4B,GAAzC,IAAgD5B,QAAQ,CAAC6B,GAA7D,EAAkE;AAChEZ,MAAAA,QAAQ,CAACC,IAAT,CAAe,GAAElB,QAAQ,CAAC4B,GAAI,IAAG5B,QAAQ,CAAC6B,GAAI,EAA9C;AACD;;AAED,WAAOZ,QAAQ,CAACK,IAAT,CAAc,KAAd,CAAP;AACD,GAtFoB,CAwFrB;;;AACAQ,EAAAA,UAAU,CAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA,QAA5B;AAAsCC,IAAAA,MAAtC;AAA8CC,IAAAA;AAA9C,GAAF,EAA0D;AAClE,UAAMnB,QAAQ,GAAG,EAAjB;;AAEA,QAAIc,MAAJ,EAAY;AACV,YAAMM,GAAG,GAAG9C,YAAY,CAACwC,MAAM,CAACO,QAAR,EAAkBP,MAAM,CAACQ,SAAzB,EAAoCR,MAAM,CAACS,MAA3C,CAAxB;AACAvB,MAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,EAAhB,EAAoB,KAAKW,eAAL,CAAsB,GAAEc,GAAI,EAA5B,CAApB,EAAoD,EAApD,CAAd;AACD;;AAEDpB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,OAAhB,EAAyBoB,KAAzB,EAAgC,GAAhC,CAAd;AACAf,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,QAAhB,EAA0BwB,MAA1B,EAAkC,GAAlC,CAAd;AACAnB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,WAAhB,EAA6BqB,SAA7B,EAAwC,GAAxC,CAAd;AACAhB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,UAAhB,EAA4BsB,QAA5B,EAAsC,GAAtC,CAAd;AACAjB,IAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKN,UAAL,CAAgB,EAAhB,EAAoB,KAAKW,eAAL,CAAqBY,MAArB,CAApB,EAAkD,EAAlD,CAAd;AAEA,UAAMM,GAAG,GAAGxB,QAAQ,CAACG,MAAT,CAAgBC,CAAC,IAAIA,CAArB,EAAwBC,IAAxB,CAA6B,KAA7B,CAAZ;AAEA,WAAQ,QAAOmB,GAAI,EAAnB;AACD;;AAEDC,EAAAA,WAAW,GAAI;AACb,WAAO,KAAKvC,KAAL,CAAWsB,GAAX,CAAekB,IAAI,IAAI;AAC5B,aAAO,KAAKb,UAAL,CAAgBa,IAAhB,CAAP;AACD,KAFM,CAAP;AAGD;;AAEDC,EAAAA,aAAa,GAAI;AACf,UAAM;AAAE1C,MAAAA,OAAF;AAAWqB,MAAAA,eAAX;AAA4BvB,MAAAA;AAA5B,QAAyC,IAA/C;AACA,UAAMiB,QAAQ,GAAGf,OAAO,CAAC2C,MAAR,GACb3C,OAAO,CAACuB,GAAR,CAAYqB,MAAM,IAAI;AACpB,UAAIC,SAAS,GAAG,UAAhB;;AACA,cAAQ,OAAOD,MAAf;AACE,aAAK,QAAL;AAAe;AACbC,YAAAA,SAAS,IAAIxB,eAAe,CAACuB,MAAD,CAA5B;AACA;AACD;;AACD,aAAK,QAAL;AAAe;AACb,kBAAM;AAAEE,cAAAA,MAAF;AAAUC,cAAAA,KAAV;AAAiBjD,cAAAA;AAAjB,gBAA8B8C,MAApC;AACA,kBAAMI,YAAY,GAAGF,MAAM,IAAK,SAAQA,MAAO,GAA/C;AACA,kBAAMG,WAAW,GAAGF,KAAK,IAAK,SAAQA,KAAM,GAA5C;AACA,kBAAMG,cAAc,GAAGpD,QAAQ,IAAK,GAAEuB,eAAe,CAACvB,QAAD,CAAW,GAAhE;AACA+C,YAAAA,SAAS,IAAIG,YAAY,GAAGC,WAAf,GAA6BC,cAA1C;AACA;AACD;AAZH;;AAeA,aAAOL,SAAP;AACD,KAlBD,CADa,GAoBb,CAAE,WAAUxB,eAAe,CAACvB,QAAD,CAAW,EAAtC,CApBJ;AAsBA,WAAOiB,QAAQ,CAACK,IAAT,CAAc,GAAd,CAAP;AACD;;AAED+B,EAAAA,WAAW,GAAI;AACb,UAAMC,gBAAgB,GAAG,KAAKZ,WAAL,MAAsB,EAA/C;AACA,UAAMa,YAAY,GAAG,KAAKvC,aAAL,EAArB;AACA,UAAMwC,WAAW,GAAG,KAAKZ,aAAL,EAApB;AAEA,UAAMH,GAAG,GAAI,GAAEc,YAAa,IAAGD,gBAAiB,IAAGE,WAAY,EAA/D;AACA,WAAOf,GAAP;AACD;;AApJoB","sourcesContent":["/**\n * Google Static Map Service Class\n * Description: Generates an url for the static map\n * @param {Array} Obj.paths  // [{ color: '0x003753', geodesic: true, weight: '5', points: ['WC2E 9DD', 'SW1A']}]\n */\n\n// UI\nimport { encodeCircle } from './circle'\n\nexport class StaticMap {\n  constructor ({\n    apiKey,\n    center,\n    channel,\n    client,\n    format = 'png',\n    language,\n    location = '',\n    maptype = 'roadmap',\n    markers = [],\n    paths = [],\n    region,\n    rootURL = 'https://maps.googleapis.com/maps/api/staticmap',\n    scale = 1,\n    signature,\n    size = '400x200',\n    style,\n    visible,\n    zoom = 15\n  }) {\n    this.apiKey = apiKey\n    this.channel = channel\n    this.center = center\n    this.client = client\n    this.format = format\n    this.language = language\n    this.location = location\n    this.maptype = maptype\n    this.markers = markers\n    this.paths = paths\n    this.region = region\n    this.rootURL = rootURL\n    this.scale = scale\n    this.signature = signature\n    this.size = size\n    this.style = style\n    this.visible = visible\n    this.zoom = zoom\n  }\n\n  urlBuilder (property, value, separator) {\n    if (value) {\n      return `${property}${separator}${value}`\n    }\n\n    return null\n  }\n\n  renderBaseMap () {\n    const urlParts = []\n    urlParts.push(this.urlBuilder('key', this.apiKey, '='))\n    urlParts.push(this.urlBuilder('center', this.center, '='))\n    urlParts.push(this.urlBuilder('channel', this.channel, '='))\n    urlParts.push(this.urlBuilder('client', this.client, '='))\n    urlParts.push(this.urlBuilder('format', this.format, '='))\n    urlParts.push(this.urlBuilder('language', this.language, '='))\n    urlParts.push(this.urlBuilder('maptype', this.maptype, '='))\n    urlParts.push(this.urlBuilder('region', this.region, '='))\n    urlParts.push(this.urlBuilder('scale', this.scale, '='))\n    urlParts.push(this.urlBuilder('signature', this.signature, '='))\n    urlParts.push(this.urlBuilder('size', this.size, '='))\n    urlParts.push(this.urlBuilder('style', this.style, '='))\n    urlParts.push(this.urlBuilder('visible', this.visible, '='))\n    urlParts.push(this.urlBuilder('zoom', this.zoom, '='))\n    const parts = urlParts.filter(x => x).join('&')\n    return `${this.rootURL}?${parts}`\n  }\n\n  locationBuilder (location) {\n    const urlParts = []\n\n    if (Array.isArray(location)) {\n      const arrParts = location.map(val => this.locationBuilder(val))\n      urlParts.push(...arrParts)\n    }\n\n    if (typeof location === 'string' || typeof location === 'number') {\n      urlParts.push(encodeURI(location))\n    }\n\n    if (typeof location === 'object' && location.lat && location.lng) {\n      urlParts.push(`${location.lat},${location.lng}`)\n    }\n\n    return urlParts.join('%7C')\n  }\n\n  // Create the URL segment for the Path\n  renderPath ({ circle, color, fillcolor, geodesic, points, weight }) {\n    const urlParts = []\n\n    if (circle) {\n      const enc = encodeCircle(circle.latitude, circle.longitude, circle.radius)\n      urlParts.push(this.urlBuilder('', this.locationBuilder(`${enc}`), ''))\n    }\n\n    urlParts.push(this.urlBuilder('color', color, ':'))\n    urlParts.push(this.urlBuilder('weight', weight, ':'))\n    urlParts.push(this.urlBuilder('fillcolor', fillcolor, ':'))\n    urlParts.push(this.urlBuilder('geodesic', geodesic, ':'))\n    urlParts.push(this.urlBuilder('', this.locationBuilder(points), ''))\n\n    const url = urlParts.filter(x => x).join('%7C')\n\n    return `path=${url}`\n  }\n\n  renderParts () {\n    return this.paths.map(path => {\n      return this.renderPath(path)\n    })\n  }\n\n  renderMarkers () {\n    const { markers, locationBuilder, location } = this\n    const urlParts = markers.length\n      ? markers.map(marker => {\n          let markerUrl = 'markers='\n          switch (typeof marker) {\n            case 'string': {\n              markerUrl += locationBuilder(marker)\n              break\n            }\n            case 'object': {\n              const { colour, label, location } = marker\n              const markerColour = colour && `color:${colour}|`\n              const markerLabel = label && `label:${label}|`\n              const markerLocation = location && `${locationBuilder(location)}|`\n              markerUrl += markerColour + markerLabel + markerLocation\n              break\n            }\n          }\n\n          return markerUrl\n        })\n      : [`markers=${locationBuilder(location)}`]\n\n    return urlParts.join('&')\n  }\n\n  generateUrl () {\n    const childrenUrlParts = this.renderParts() || []\n    const mainUrlParts = this.renderBaseMap()\n    const markerParts = this.renderMarkers()\n\n    const url = `${mainUrlParts}&${childrenUrlParts}&${markerParts}`\n    return url\n  }\n}\n"]},"metadata":{},"sourceType":"module"}