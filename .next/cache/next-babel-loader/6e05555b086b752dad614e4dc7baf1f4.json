{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _class,\n    _temp,\n    _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/molecules/webcam/components/webcam.js\";\n\nvar __jsx = React.createElement;\n\n/**\n * Webcam\n */\n// React\nimport React, { Component } from 'react';\nimport { bool, func, number, object, oneOf, oneOfType, string } from 'prop-types'; // UI\n\nimport { Design } from \"./design\"; // Style\n\nimport { withTheme } from 'styled-components';\nvar Webcam = withTheme((_temp = _class =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Webcam, _Component);\n\n  function Webcam() {\n    var _this;\n\n    _classCallCheck(this, Webcam);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Webcam).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"hasGetUserMedia\", function () {\n      return !!(navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUserMedia\", function (err, stream) {\n      var _this$props = _this.props,\n          onUserMediaError = _this$props.onUserMediaError,\n          onUserMedia = _this$props.onUserMedia;\n\n      if (err) {\n        _this.setState({\n          hasUserMedia: false\n        });\n\n        onUserMediaError(err);\n        return;\n      }\n\n      _this.stream = stream;\n\n      try {\n        _this.video.srcObject = stream;\n\n        _this.setState({\n          hasUserMedia: true\n        });\n      } catch (error) {\n        _this.setState({\n          hasUserMedia: true,\n          src: window.URL.createObjectURL(stream)\n        });\n      }\n\n      onUserMedia();\n    });\n\n    _this.state = {\n      hasUserMedia: false,\n      src: ''\n    };\n    return _this;\n  }\n\n  _createClass(Webcam, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.hasGetUserMedia()) return;\n      var hasUserMedia = this.state.hasUserMedia;\n      Webcam.mountedInstances.push(this);\n\n      if (!hasUserMedia && !Webcam.userMediaRequested) {\n        this.requestUserMedia();\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps) {\n      var _this$props2 = this.props,\n          audioConstraints = _this$props2.audioConstraints,\n          videoConstraints = _this$props2.videoConstraints;\n\n      if (_JSON$stringify(nextProps.audioConstraints) !== _JSON$stringify(audioConstraints) || _JSON$stringify(nextProps.videoConstraints) !== _JSON$stringify(videoConstraints)) {\n        this.requestUserMedia();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var src = this.state.src;\n      var index = Webcam.mountedInstances.indexOf(this);\n      Webcam.mountedInstances.splice(index, 1);\n\n      if (Webcam.mountedInstances.length === 0 && this.state.hasUserMedia) {\n        if (this.stream.stop) {\n          this.stream.stop();\n        } else {\n          if (this.stream.getVideoTracks) {\n            this.stream.getVideoTracks().map(function (track) {\n              return track.stop();\n            });\n          }\n\n          if (this.stream.getAudioTracks) {\n            this.stream.getAudioTracks().map(function (track) {\n              return track.stop();\n            });\n          }\n        }\n\n        Webcam.userMediaRequested = false;\n        window.URL.revokeObjectURL(src);\n      }\n    }\n  }, {\n    key: \"getScreenshot\",\n    value: function getScreenshot() {\n      var _this$props3 = this.props,\n          screenshotFormat = _this$props3.screenshotFormat,\n          screenshotQuality = _this$props3.screenshotQuality;\n      var hasUserMedia = this.state.hasUserMedia;\n      if (!hasUserMedia) return null;\n      var canvas = this.getCanvas();\n      return canvas && canvas.toDataURL(screenshotFormat, screenshotQuality);\n    }\n  }, {\n    key: \"getCanvas\",\n    value: function getCanvas() {\n      var screenshotWidth = this.props.screenshotWidth;\n      var hasUserMedia = this.state.hasUserMedia;\n      var _this$video = this.video,\n          clientWidth = _this$video.clientWidth,\n          videoHeight = _this$video.videoHeight,\n          videoWidth = _this$video.videoWidth;\n      if (!hasUserMedia || !videoHeight) return null;\n\n      if (!this.ctx) {\n        var _canvas = document.createElement('canvas');\n\n        var aspectRatio = videoWidth / videoHeight;\n        var canvasWidth = screenshotWidth || clientWidth;\n        _canvas.width = canvasWidth;\n        _canvas.height = canvasWidth / aspectRatio;\n        this.canvas = _canvas;\n        this.ctx = _canvas.getContext('2d');\n      }\n\n      var ctx = this.ctx,\n          canvas = this.canvas;\n      ctx.drawImage(this.video, 0, 0, canvas.width, canvas.height);\n      return canvas;\n    }\n  }, {\n    key: \"requestUserMedia\",\n    value: function requestUserMedia() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          audio = _this$props4.audio,\n          audioConstraints = _this$props4.audioConstraints,\n          videoConstraints = _this$props4.videoConstraints;\n      navigator.getUserMedia = navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n\n      var sourceSelected = function sourceSelected(audioConstraints, videoConstraints) {\n        // Request video\n        var constraints = {\n          video: videoConstraints || true\n        }; // Request Audo\n\n        if (audio) {\n          constraints.audio = audioConstraints || true;\n        }\n\n        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n          Webcam.mountedInstances.forEach(function () {\n            return _this2.handleUserMedia(null, stream);\n          });\n        })[\"catch\"](function (e) {\n          Webcam.mountedInstances.forEach(function () {\n            return _this2.handleUserMedia(e);\n          });\n        });\n      };\n\n      if ('mediaDevices' in navigator) {\n        sourceSelected(audioConstraints, videoConstraints);\n      } else {\n        var optionalSource = function optionalSource(id) {\n          return {\n            optional: [{\n              sourceId: id\n            }]\n          };\n        };\n\n        var constraintToSourceId = function constraintToSourceId(constraint) {\n          var deviceId = (constraint || {}).deviceId;\n\n          if (typeof deviceId === 'string') {\n            return deviceId;\n          } else if (_Array$isArray(deviceId) && deviceId.length > 0) {\n            return deviceId[0];\n          } else if (typeof deviceId === 'object' && deviceId.ideal) {\n            return deviceId.ideal;\n          }\n\n          return null;\n        };\n\n        window.MediaStreamTrack.getSources(function (sources) {\n          var audioSource = null;\n          var videoSource = null;\n          sources.forEach(function (source) {\n            if (source.kind === 'audio') {\n              audioSource = source.id;\n            } else if (source.kind === 'video') {\n              videoSource = source.id;\n            }\n          });\n          var audioSourceId = constraintToSourceId(audioConstraints);\n\n          if (audioSourceId) {\n            audioSource = audioSourceId;\n          }\n\n          var videoSourceId = constraintToSourceId(videoConstraints);\n\n          if (videoSourceId) {\n            videoSource = videoSourceId;\n          }\n\n          sourceSelected(optionalSource(audioSource), optionalSource(videoSource));\n        });\n      }\n\n      Webcam.userMediaRequested = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props5 = this.props,\n          audio = _this$props5.audio,\n          className = _this$props5.className,\n          height = _this$props5.height,\n          style = _this$props5.style,\n          width = _this$props5.width;\n      var src = this.state.src;\n      return __jsx(\"video\", {\n        autoPlay: true,\n        width: width,\n        height: height,\n        src: src,\n        muted: audio,\n        className: className,\n        playsInline: true,\n        style: style,\n        ref: function ref(_ref) {\n          _this3.video = _ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Webcam;\n}(Component), _defineProperty(_class, \"propTypes\", {\n  audio: bool,\n  onUserMedia: func,\n  onUserMediaError: func,\n  height: oneOfType([number, string]),\n  width: oneOfType([number, string]),\n  screenshotFormat: oneOf(['image/webp', 'image/png', 'image/jpeg']),\n  style: object,\n  className: string,\n  screenshotQuality: number,\n  screenshotWidth: number // audioConstraints: audioConstraintType,\n  // videoConstraints: videoConstraintType\n\n}), _defineProperty(_class, \"defaultProps\", {\n  audio: false,\n  className: '',\n  height: 463.5,\n  onUserMedia: function onUserMedia() {},\n  onUserMediaError: function onUserMediaError() {},\n  screenshotFormat: 'image/webp',\n  screenshotQuality: 0.8,\n  style: {\n    borderRadius: '.5rem .5rem 0 0'\n  },\n  width: 824\n}), _defineProperty(_class, \"mountedInstances\", []), _defineProperty(_class, \"userMediaRequested\", false), _temp));\nWebcam.Design = Design;\nexport { Webcam }; // const constrainStringType = PropTypes.oneOfType([\n//   PropTypes.string,\n//   PropTypes.arrayOf(PropTypes.string),\n//   PropTypes.shape({\n//     exact: PropTypes.oneOfType([\n//       PropTypes.string,\n//       PropTypes.arrayOf(PropTypes.string),\n//     ]),\n//   }),\n//   PropTypes.shape({\n//     ideal: PropTypes.oneOfType([\n//       PropTypes.string,\n//       PropTypes.arrayOf(PropTypes.string),\n//     ]),\n//   }),\n// ]);\n// const constrainBooleanType = PropTypes.oneOfType([\n//   PropTypes.shape({\n//     exact: PropTypes.bool,\n//   }),\n//   PropTypes.shape({\n//     ideal: PropTypes.bool,\n//   }),\n// ]);\n// const constrainLongType = PropTypes.oneOfType([\n//   PropTypes.number,\n//   PropTypes.shape({\n//     exact: PropTypes.number,\n//     ideal: PropTypes.number,\n//     min: PropTypes.number,\n//     max: PropTypes.number,\n//   }),\n// ]);\n// const constrainDoubleType = constrainLongType;\n// const audioConstraintType = PropTypes.shape({\n//   deviceId: constrainStringType,\n//   groupId: constrainStringType,\n//   autoGainControl: constrainBooleanType,\n//   channelCount: constrainLongType,\n//   latency: constrainDoubleType,\n//   noiseSuppression: constrainBooleanType,\n//   sampleRate: constrainLongType,\n//   sampleSize: constrainLongType,\n//   volume: constrainDoubleType,\n// });\n// const videoConstraintType = PropTypes.shape({\n//   deviceId: constrainStringType,\n//   groupId: constrainStringType,\n//   aspectRatio: constrainDoubleType,\n//   facingMode: constrainStringType,\n//   frameRate: constrainDoubleType,\n//   height: constrainLongType,\n//   width: constrainLongType,\n// });","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/molecules/webcam/components/webcam.js"],"names":["React","Component","bool","func","number","object","oneOf","oneOfType","string","Design","withTheme","Webcam","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","err","stream","props","onUserMediaError","onUserMedia","setState","hasUserMedia","video","srcObject","error","src","window","URL","createObjectURL","state","hasGetUserMedia","mountedInstances","push","userMediaRequested","requestUserMedia","nextProps","audioConstraints","videoConstraints","index","indexOf","splice","length","stop","getVideoTracks","map","track","getAudioTracks","revokeObjectURL","screenshotFormat","screenshotQuality","canvas","getCanvas","toDataURL","screenshotWidth","clientWidth","videoHeight","videoWidth","ctx","document","createElement","aspectRatio","canvasWidth","width","height","getContext","drawImage","audio","sourceSelected","constraints","then","forEach","handleUserMedia","e","optionalSource","id","optional","sourceId","constraintToSourceId","constraint","deviceId","ideal","MediaStreamTrack","getSources","sources","audioSource","videoSource","source","kind","audioSourceId","videoSourceId","className","style","ref","borderRadius"],"mappings":"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","sourcesContent":["/**\n * Webcam\n */\n\n// React\nimport React, { Component } from 'react'\nimport { bool, func, number, object, oneOf, oneOfType, string } from 'prop-types'\n\n// UI\nimport { Design } from './design'\n\n// Style\nimport { withTheme } from 'styled-components'\n\nconst Webcam = withTheme(\n  class Webcam extends Component {\n    constructor () {\n      super()\n      this.state = {\n        hasUserMedia: false,\n        src: ''\n      }\n    }\n\n    static propTypes = {\n      audio: bool,\n      onUserMedia: func,\n      onUserMediaError: func,\n      height: oneOfType([number, string]),\n      width: oneOfType([number, string]),\n      screenshotFormat: oneOf(['image/webp', 'image/png', 'image/jpeg']),\n      style: object,\n      className: string,\n      screenshotQuality: number,\n      screenshotWidth: number\n      // audioConstraints: audioConstraintType,\n      // videoConstraints: videoConstraintType\n    }\n\n    static defaultProps = {\n      audio: false,\n      className: '',\n      height: 463.5,\n      onUserMedia: () => {},\n      onUserMediaError: () => {},\n      screenshotFormat: 'image/webp',\n      screenshotQuality: 0.8,\n      style: { borderRadius: '.5rem .5rem 0 0' },\n      width: 824\n    }\n\n    static mountedInstances = []\n\n    static userMediaRequested = false\n\n    componentDidMount () {\n      if (!this.hasGetUserMedia()) return\n\n      const { hasUserMedia } = this.state\n\n      Webcam.mountedInstances.push(this)\n\n      if (!hasUserMedia && !Webcam.userMediaRequested) {\n        this.requestUserMedia()\n      }\n    }\n\n    componentWillUpdate (nextProps) {\n      const { audioConstraints, videoConstraints } = this.props\n\n      if (\n        JSON.stringify(nextProps.audioConstraints) !== JSON.stringify(audioConstraints) ||\n        JSON.stringify(nextProps.videoConstraints) !== JSON.stringify(videoConstraints)\n      ) {\n        this.requestUserMedia()\n      }\n    }\n\n    componentWillUnmount () {\n      const { src } = this.state\n\n      const index = Webcam.mountedInstances.indexOf(this)\n      Webcam.mountedInstances.splice(index, 1)\n\n      if (Webcam.mountedInstances.length === 0 && this.state.hasUserMedia) {\n        if (this.stream.stop) {\n          this.stream.stop()\n        } else {\n          if (this.stream.getVideoTracks) {\n            this.stream.getVideoTracks().map(track => track.stop())\n          }\n          if (this.stream.getAudioTracks) {\n            this.stream.getAudioTracks().map(track => track.stop())\n          }\n        }\n        Webcam.userMediaRequested = false\n        window.URL.revokeObjectURL(src)\n      }\n    }\n\n    hasGetUserMedia = () => {\n      return !!(\n        navigator.mediaDevices.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia ||\n        navigator.msGetUserMedia\n      )\n    }\n\n    getScreenshot () {\n      const { screenshotFormat, screenshotQuality } = this.props\n      const { hasUserMedia } = this.state\n\n      if (!hasUserMedia) return null\n\n      const canvas = this.getCanvas()\n\n      return canvas && canvas.toDataURL(screenshotFormat, screenshotQuality)\n    }\n\n    getCanvas () {\n      const { screenshotWidth } = this.props\n      const { hasUserMedia } = this.state\n      const { clientWidth, videoHeight, videoWidth } = this.video\n\n      if (!hasUserMedia || !videoHeight) return null\n\n      if (!this.ctx) {\n        const canvas = document.createElement('canvas')\n        const aspectRatio = videoWidth / videoHeight\n\n        const canvasWidth = screenshotWidth || clientWidth\n\n        canvas.width = canvasWidth\n        canvas.height = canvasWidth / aspectRatio\n\n        this.canvas = canvas\n        this.ctx = canvas.getContext('2d')\n      }\n\n      const { ctx, canvas } = this\n      ctx.drawImage(this.video, 0, 0, canvas.width, canvas.height)\n\n      return canvas\n    }\n\n    requestUserMedia () {\n      const { audio, audioConstraints, videoConstraints } = this.props\n\n      navigator.getUserMedia =\n        navigator.mediaDevices.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia ||\n        navigator.msGetUserMedia\n\n      const sourceSelected = (audioConstraints, videoConstraints) => {\n        // Request video\n        const constraints = {\n          video: videoConstraints || true\n        }\n\n        // Request Audo\n        if (audio) {\n          constraints.audio = audioConstraints || true\n        }\n\n        navigator.mediaDevices\n          .getUserMedia(constraints)\n          .then(stream => {\n            Webcam.mountedInstances.forEach(() => this.handleUserMedia(null, stream))\n          })\n          .catch(e => {\n            Webcam.mountedInstances.forEach(() => this.handleUserMedia(e))\n          })\n      }\n\n      if ('mediaDevices' in navigator) {\n        sourceSelected(audioConstraints, videoConstraints)\n      } else {\n        const optionalSource = id => ({ optional: [{ sourceId: id }] })\n\n        const constraintToSourceId = constraint => {\n          const deviceId = (constraint || {}).deviceId\n\n          if (typeof deviceId === 'string') {\n            return deviceId\n          } else if (Array.isArray(deviceId) && deviceId.length > 0) {\n            return deviceId[0]\n          } else if (typeof deviceId === 'object' && deviceId.ideal) {\n            return deviceId.ideal\n          }\n\n          return null\n        }\n\n        window.MediaStreamTrack.getSources(sources => {\n          let audioSource = null\n          let videoSource = null\n\n          sources.forEach(source => {\n            if (source.kind === 'audio') {\n              audioSource = source.id\n            } else if (source.kind === 'video') {\n              videoSource = source.id\n            }\n          })\n\n          const audioSourceId = constraintToSourceId(audioConstraints)\n          if (audioSourceId) {\n            audioSource = audioSourceId\n          }\n\n          const videoSourceId = constraintToSourceId(videoConstraints)\n          if (videoSourceId) {\n            videoSource = videoSourceId\n          }\n\n          sourceSelected(optionalSource(audioSource), optionalSource(videoSource))\n        })\n      }\n\n      Webcam.userMediaRequested = true\n    }\n\n    handleUserMedia = (err, stream) => {\n      const { onUserMediaError, onUserMedia } = this.props\n\n      if (err) {\n        this.setState({ hasUserMedia: false })\n        onUserMediaError(err)\n        return\n      }\n\n      this.stream = stream\n\n      try {\n        this.video.srcObject = stream\n        this.setState({ hasUserMedia: true })\n      } catch (error) {\n        this.setState({\n          hasUserMedia: true,\n          src: window.URL.createObjectURL(stream)\n        })\n      }\n\n      onUserMedia()\n    }\n\n    render () {\n      const { audio, className, height, style, width } = this.props\n      const { src } = this.state\n\n      return (\n        <video\n          autoPlay\n          width={width}\n          height={height}\n          src={src}\n          muted={audio}\n          className={className}\n          playsInline\n          style={style}\n          ref={ref => {\n            this.video = ref\n          }}\n        />\n      )\n    }\n  }\n)\n\nWebcam.Design = Design\n\nexport { Webcam }\n\n// const constrainStringType = PropTypes.oneOfType([\n//   PropTypes.string,\n//   PropTypes.arrayOf(PropTypes.string),\n//   PropTypes.shape({\n//     exact: PropTypes.oneOfType([\n//       PropTypes.string,\n//       PropTypes.arrayOf(PropTypes.string),\n//     ]),\n//   }),\n//   PropTypes.shape({\n//     ideal: PropTypes.oneOfType([\n//       PropTypes.string,\n//       PropTypes.arrayOf(PropTypes.string),\n//     ]),\n//   }),\n// ]);\n\n// const constrainBooleanType = PropTypes.oneOfType([\n//   PropTypes.shape({\n//     exact: PropTypes.bool,\n//   }),\n//   PropTypes.shape({\n//     ideal: PropTypes.bool,\n//   }),\n// ]);\n\n// const constrainLongType = PropTypes.oneOfType([\n//   PropTypes.number,\n//   PropTypes.shape({\n//     exact: PropTypes.number,\n//     ideal: PropTypes.number,\n//     min: PropTypes.number,\n//     max: PropTypes.number,\n//   }),\n// ]);\n\n// const constrainDoubleType = constrainLongType;\n\n// const audioConstraintType = PropTypes.shape({\n//   deviceId: constrainStringType,\n//   groupId: constrainStringType,\n//   autoGainControl: constrainBooleanType,\n//   channelCount: constrainLongType,\n//   latency: constrainDoubleType,\n//   noiseSuppression: constrainBooleanType,\n//   sampleRate: constrainLongType,\n//   sampleSize: constrainLongType,\n//   volume: constrainDoubleType,\n// });\n\n// const videoConstraintType = PropTypes.shape({\n//   deviceId: constrainStringType,\n//   groupId: constrainStringType,\n//   aspectRatio: constrainDoubleType,\n//   facingMode: constrainStringType,\n//   frameRate: constrainDoubleType,\n//   height: constrainLongType,\n//   width: constrainLongType,\n// });\n"]},"metadata":{},"sourceType":"module"}