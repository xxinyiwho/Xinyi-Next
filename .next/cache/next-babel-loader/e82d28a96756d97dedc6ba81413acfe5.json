{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n\n/**\n * Hooks - Use Local Storage\n */\nimport { useState } from 'react';\nexport const useLocalStorage = (key, initialValue) => {\n  const parse = item => {\n    let a = item;\n\n    try {\n      a = JSON.parse(item);\n    } catch (e) {}\n\n    return a;\n  }; // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n\n\n  const {\n    0: storedValue,\n    1: setStoredValue\n  } = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, _JSON$stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","parse","item","a","JSON","e","storedValue","setStoredValue","window","localStorage","getItem","error","setValue","value","valueToStore","Function","setItem","console"],"mappings":";;AAAA;;;AAIA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,YAAN,KAAuB;AACpD,QAAMC,KAAK,GAAGC,IAAI,IAAI;AACpB,QAAIC,CAAC,GAAGD,IAAR;;AAEA,QAAI;AACFC,MAAAA,CAAC,GAAGC,IAAI,CAACH,KAAL,CAAWC,IAAX,CAAJ;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU,CAAE;;AAEd,WAAOF,CAAP;AACD,GARD,CADoD,CAWpD;AACA;;;AACA,QAAM;AAAA,OAACG,WAAD;AAAA,OAAcC;AAAd,MAAgCV,QAAQ,CAAC,MAAM;AACnD,QAAI;AACF;AACA,YAAMK,IAAI,GAAGM,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BX,GAA5B,CAAb,CAFE,CAIF;;AACA,aAAOG,IAAI,GAAGD,KAAK,CAACC,IAAD,CAAR,GAAiBF,YAA5B;AACD,KAND,CAME,OAAOW,KAAP,EAAc;AACd;AACA,aAAOX,YAAP;AACD;AACF,GAX6C,CAA9C,CAboD,CA0BpD;AACA;;AACA,QAAMY,QAAQ,GAAGC,KAAK,IAAI;AACxB,QAAI;AACF;AACA,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACP,WAAD,CAAjC,GAAiDO,KAAtE,CAFE,CAIF;;AACAN,MAAAA,cAAc,CAACO,YAAD,CAAd,CALE,CAOF;;AACAN,MAAAA,MAAM,CAACC,YAAP,CAAoBO,OAApB,CAA4BjB,GAA5B,EAAiC,gBAAee,YAAf,CAAjC;AACD,KATD,CASE,OAAOH,KAAP,EAAc;AACd;AACAM,MAAAA,OAAO,CAACN,KAAR,CAAcA,KAAd;AACD;AACF,GAdD;;AAgBA,SAAO,CAACL,WAAD,EAAcM,QAAd,CAAP;AACD,CA7CM","sourcesContent":["/**\n * Hooks - Use Local Storage\n */\n\nimport { useState } from 'react'\n\nexport const useLocalStorage = (key, initialValue) => {\n  const parse = item => {\n    let a = item\n\n    try {\n      a = JSON.parse(item)\n    } catch (e) {}\n\n    return a\n  }\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n\n      // Parse stored json or if none return initialValue\n      return item ? parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value\n\n      // Save state\n      setStoredValue(valueToStore)\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n"]},"metadata":{},"sourceType":"module"}