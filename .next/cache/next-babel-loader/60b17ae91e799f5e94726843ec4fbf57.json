{"ast":null,"code":"/**\n * Services - Hooks  - useInterval\n *\n * Allows running code on specific intervals\n *\n * @see https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n *\n */\nimport { useEffect, useRef } from 'react';\nexport var useInterval = function useInterval(callback, delay) {\n  var savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(function () {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      var id = setInterval(tick, delay);\n      return function () {\n        return clearInterval(id);\n      };\n    }\n  }, [delay]);\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/services/hooks/useInterval.js"],"names":["useEffect","useRef","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval"],"mappings":"AAAA;;;;;;;;AASA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAWC,KAAX,EAAqB;AAC9C,MAAMC,aAAa,GAAGJ,MAAM,EAA5B,CAD8C,CAG9C;;AACAD,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAJ8C,CAQ9C;;AACAH,EAAAA,SAAS,CAAC,YAAM;AACd,aAASO,IAAT,GAAiB;AACfF,MAAAA,aAAa,CAACC,OAAd;AACD;;AACD,QAAIF,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAMI,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOH,KAAP,CAAtB;AACA,aAAO;AAAA,eAAMM,aAAa,CAACF,EAAD,CAAnB;AAAA,OAAP;AACD;AACF,GARQ,EAQN,CAACJ,KAAD,CARM,CAAT;AASD,CAlBM","sourcesContent":["/**\n * Services - Hooks  - useInterval\n *\n * Allows running code on specific intervals\n *\n * @see https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n *\n */\n\nimport { useEffect, useRef } from 'react'\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick () {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n"]},"metadata":{},"sourceType":"module"}