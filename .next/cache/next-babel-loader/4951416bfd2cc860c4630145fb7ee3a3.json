{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n// React\nimport { useEffect, useState } from 'react'; // Services\n\nimport { GeoCoder } from \"../google/geocoder\";\nexport var useGeoCoder = function useGeoCoder(_ref) {\n  var address = _ref.address,\n      apiKey = _ref.apiKey,\n      city = _ref.city,\n      language = _ref.language,\n      region = _ref.region;\n\n  var _useState = useState({\n    lat: '',\n    lng: ''\n  }),\n      coordinates = _useState[0],\n      setCoordinates = _useState[1];\n\n  useEffect(function () {\n    var getCoordinates = function getCoordinates() {\n      var geo, coordinates;\n      return _regeneratorRuntime.async(function getCoordinates$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              geo = new GeoCoder({\n                apiKey: apiKey,\n                language: language,\n                region: region\n              });\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(geo.fromAddress({\n                address: address,\n                city: city\n              }));\n\n            case 3:\n              coordinates = _context.sent;\n              setCoordinates(coordinates);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    getCoordinates();\n  }, []);\n  return coordinates;\n};","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/services/hooks/useGeoCoder.js"],"names":["useEffect","useState","GeoCoder","useGeoCoder","address","apiKey","city","language","region","lat","lng","coordinates","setCoordinates","getCoordinates","geo","fromAddress"],"mappings":";AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAEA;;AACA,SAASC,QAAT;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAiD;AAAA,MAA9CC,OAA8C,QAA9CA,OAA8C;AAAA,MAArCC,MAAqC,QAArCA,MAAqC;AAAA,MAA7BC,IAA6B,QAA7BA,IAA6B;AAAA,MAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAAA,kBACpCP,QAAQ,CAAC;AAAEQ,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,GAAG,EAAE;AAAhB,GAAD,CAD4B;AAAA,MACnEC,WADmE;AAAA,MACtDC,cADsD;;AAG1EZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMa,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,GADe,GACT,IAAIZ,QAAJ,CAAa;AACvBG,gBAAAA,MAAM,EAANA,MADuB;AAEvBE,gBAAAA,QAAQ,EAARA,QAFuB;AAGvBC,gBAAAA,MAAM,EAANA;AAHuB,eAAb,CADS;AAAA;AAAA,+CAOKM,GAAG,CAACC,WAAJ,CAAgB;AAAEX,gBAAAA,OAAO,EAAPA,OAAF;AAAWE,gBAAAA,IAAI,EAAJA;AAAX,eAAhB,CAPL;;AAAA;AAOfK,cAAAA,WAPe;AAQrBC,cAAAA,cAAc,CAACD,WAAD,CAAd;;AARqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAUAE,IAAAA,cAAc;AACf,GAZQ,EAYN,EAZM,CAAT;AAcA,SAAOF,WAAP;AACD,CAlBM","sourcesContent":["// React\nimport { useEffect, useState } from 'react'\n\n// Services\nimport { GeoCoder } from '../google/geocoder'\n\nexport const useGeoCoder = ({ address, apiKey, city, language, region }) => {\n  const [coordinates, setCoordinates] = useState({ lat: '', lng: '' })\n\n  useEffect(() => {\n    const getCoordinates = async () => {\n      const geo = new GeoCoder({\n        apiKey,\n        language,\n        region\n      })\n\n      const coordinates = await geo.fromAddress({ address, city })\n      setCoordinates(coordinates)\n    }\n    getCoordinates()\n  }, [])\n\n  return coordinates\n}\n"]},"metadata":{},"sourceType":"module"}