{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/atoms/form/form/index.js\";\nvar __jsx = React.createElement;\n\n/**\n * Form\n * Validates each field based on HTML5 atttributes, then calls the submit method\n * of the calling class\n */\n// React\nimport React, { Component } from 'react';\nimport { func } from 'prop-types'; // Style\n\nimport styled from 'styled-components';\nexport var Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isValidated: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getErrorLabel\", function (elem) {\n      var errorClassName = Form.errorClassName;\n      var parentNode = elem.parentNode,\n          parentNodeName = elem.parentNode.nodeName,\n          nodeName = elem.nodeName; // check if element is of type input and if parent's nodeName is label\n\n      if (nodeName.toLowerCase() === 'input' && parentNodeName.toLowerCase() !== 'label') {\n        return parentNode.parentNode.querySelector(errorClassName);\n      }\n\n      return parentNode.querySelector(errorClassName);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validate\", function () {\n      // this.formEl is a reference in the component to the form DOM element.\n      var formEl = _this.formEl;\n      var formLength = formEl.length;\n      /**\n       * The checkValidity() method on a form runs the html5 form validation of\n       * its elements and returns the result as a boolean.\n       *\n       * It returns 'false' if at least one of the form elements does not qualify,\n       * and 'true', if all form elements are filled with valid values.\n       */\n\n      if (formEl.checkValidity() === false) {\n        for (var i = 0; i < formLength; i++) {\n          // the i-th child of the form corresponds to the forms i-th input element\n          var elem = formEl[i];\n\n          var errorLabel = _this.getErrorLabel(elem);\n\n          if (elem.type !== 'checkbox' && elem.parentNode.parentNode.nodeName.toLowerCase() === 'fieldset') {\n            errorLabel = elem.parentNode.parentNode.querySelector('.Form-feedback');\n          } // errorLabel placed next to an element is the container we want to use\n          // for validation error message for that element\n          // const errorLabel = parentNode.querySelector('.Form-feedback')\n          // A form element contains also any buttuns contained in the form. There\n          // is no need to validate a button, so, we'll skip that nodes.\n\n\n          if (errorLabel && elem.nodeName.toLowerCase() !== 'button' && elem.nodeName.toLowerCase() !== 'fieldset') {\n            // Each note in html5 form has a validity property. It contains the\n            // validation state of that element. The elem.validity.valid property\n            // indicates whether the element qualifies its validation rules or no.\n            // If it does not qualify, the elem.validationMessage property will\n            // contain the localized validation error message. We will show that\n            // message in our error container if the element is invalid, and clear\n            // the previous message, if it is valid.\n            if (!elem.validity.valid) {\n              errorLabel.textContent = elem.validationMessage;\n            } else {\n              errorLabel.textContent = '';\n            }\n          }\n        } // Return 'false', as the formEl.checkValidity() method said there are some invalid form inputs.\n\n\n        return false;\n      } else {\n        // The form is valid, so we clear all the error messages\n        for (var _i = 0; _i < formLength; _i++) {\n          var _elem = formEl[_i];\n          var parentNode = _elem.parentNode;\n\n          if (parentNode.parentNode.nodeName.toLowerCase() === 'fieldset') {\n            parentNode = _elem.parentNode.parentNode;\n          }\n\n          var _errorLabel = parentNode.querySelector('.Form-feedback');\n\n          if (_errorLabel && _elem.nodeName.toLowerCase() !== 'button') {\n            _errorLabel.textContent = '';\n          }\n        } // Return 'true', as the form is valid for submission\n\n\n        return true;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (e) {\n      e.preventDefault();\n      var submit = _this.props.submit; // If the call of the validate method was successful, we can proceed with\n      // form submission. Otherwise we do nothing.\n\n      if (_this.validate()) {\n        submit(e);\n      }\n\n      _this.setState({\n        isValidated: true\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"render\",\n\n    /**\n     * Render the component as a regular form element with appended children from props.\n     */\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className;\n      return __jsx(StyledForm, {\n        className: className,\n        noValidate: true,\n        ref: function ref(form) {\n          return _this2.formEl = form;\n        },\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, children);\n    }\n  }], [{\n    key: \"errorClassName\",\n    get: function get() {\n      return '.Form-feedback';\n    }\n  }]);\n\n  return Form;\n}(Component);\n\n_defineProperty(Form, \"propTypes\", {\n  submit: func.isRequired\n});\n\nvar StyledForm = styled.form.withConfig({\n  displayName: \"form__StyledForm\",\n  componentId: \"sc-1xk5of6-0\"\n})([\"font-size:1rem;\"]);","map":{"version":3,"sources":["/Users/xxinyi/code/Next/Portfolio with Next/Xinyi-Next/node_modules/industry-ui/components/atoms/form/form/index.js"],"names":["React","Component","func","styled","Form","isValidated","elem","errorClassName","parentNode","parentNodeName","nodeName","toLowerCase","querySelector","formEl","formLength","length","checkValidity","i","errorLabel","getErrorLabel","type","validity","valid","textContent","validationMessage","e","preventDefault","submit","props","validate","setState","children","className","form","handleSubmit","isRequired","StyledForm"],"mappings":"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","sourcesContent":["/**\n * Form\n * Validates each field based on HTML5 atttributes, then calls the submit method\n * of the calling class\n */\n\n// React\nimport React, { Component } from 'react'\nimport { func } from 'prop-types'\n\n// Style\nimport styled from 'styled-components'\n\nexport class Form extends Component {\n  state = {\n    isValidated: false\n  }\n\n  static propTypes = {\n    submit: func.isRequired\n  }\n\n  static get errorClassName () {\n    return '.Form-feedback'\n  }\n\n  getErrorLabel = elem => {\n    const { errorClassName } = Form\n    const {\n      parentNode,\n      parentNode: { nodeName: parentNodeName },\n      nodeName\n    } = elem\n    // check if element is of type input and if parent's nodeName is label\n    if (nodeName.toLowerCase() === 'input' && parentNodeName.toLowerCase() !== 'label') {\n      return parentNode.parentNode.querySelector(errorClassName)\n    }\n    return parentNode.querySelector(errorClassName)\n  }\n\n  /**\n   * The main function that validates the form and fills in the error messages.\n   *\n   * @returns bool Returns a boolean showing if the form is valid for submission or not.\n   */\n  validate = () => {\n    // this.formEl is a reference in the component to the form DOM element.\n    const formEl = this.formEl\n    const formLength = formEl.length\n\n    /**\n     * The checkValidity() method on a form runs the html5 form validation of\n     * its elements and returns the result as a boolean.\n     *\n     * It returns 'false' if at least one of the form elements does not qualify,\n     * and 'true', if all form elements are filled with valid values.\n     */\n    if (formEl.checkValidity() === false) {\n      for (let i = 0; i < formLength; i++) {\n        // the i-th child of the form corresponds to the forms i-th input element\n        const elem = formEl[i]\n        let errorLabel = this.getErrorLabel(elem)\n\n        if (\n          elem.type !== 'checkbox' &&\n          elem.parentNode.parentNode.nodeName.toLowerCase() === 'fieldset'\n        ) {\n          errorLabel = elem.parentNode.parentNode.querySelector('.Form-feedback')\n        }\n\n        // errorLabel placed next to an element is the container we want to use\n        // for validation error message for that element\n        // const errorLabel = parentNode.querySelector('.Form-feedback')\n\n        // A form element contains also any buttuns contained in the form. There\n        // is no need to validate a button, so, we'll skip that nodes.\n        if (\n          errorLabel &&\n          elem.nodeName.toLowerCase() !== 'button' &&\n          elem.nodeName.toLowerCase() !== 'fieldset'\n        ) {\n          // Each note in html5 form has a validity property. It contains the\n          // validation state of that element. The elem.validity.valid property\n          // indicates whether the element qualifies its validation rules or no.\n          // If it does not qualify, the elem.validationMessage property will\n          // contain the localized validation error message. We will show that\n          // message in our error container if the element is invalid, and clear\n          // the previous message, if it is valid.\n          if (!elem.validity.valid) {\n            errorLabel.textContent = elem.validationMessage\n          } else {\n            errorLabel.textContent = ''\n          }\n        }\n      }\n\n      // Return 'false', as the formEl.checkValidity() method said there are some invalid form inputs.\n      return false\n    } else {\n      // The form is valid, so we clear all the error messages\n      for (let i = 0; i < formLength; i++) {\n        const elem = formEl[i]\n        let parentNode = elem.parentNode\n\n        if (parentNode.parentNode.nodeName.toLowerCase() === 'fieldset') {\n          parentNode = elem.parentNode.parentNode\n        }\n\n        const errorLabel = parentNode.querySelector('.Form-feedback')\n\n        if (errorLabel && elem.nodeName.toLowerCase() !== 'button') {\n          errorLabel.textContent = ''\n        }\n      }\n\n      // Return 'true', as the form is valid for submission\n      return true\n    }\n  }\n\n  /**\n   * This is the method that is called on form submit.\n   * It stops the default form submission process and proceeds with custom\n   * validation.\n   */\n  handleSubmit = e => {\n    e.preventDefault()\n\n    const { submit } = this.props\n\n    // If the call of the validate method was successful, we can proceed with\n    // form submission. Otherwise we do nothing.\n    if (this.validate()) {\n      submit(e)\n    }\n\n    this.setState({ isValidated: true })\n  }\n\n  /**\n   * Render the component as a regular form element with appended children from props.\n   */\n  render () {\n    const { children, className } = this.props\n\n    return (\n      <StyledForm\n        className={className}\n        noValidate\n        ref={form => (this.formEl = form)}\n        onSubmit={this.handleSubmit}\n      >\n        {children}\n      </StyledForm>\n    )\n  }\n}\n\nconst StyledForm = styled.form`\n  font-size: 1rem;\n`\n"]},"metadata":{},"sourceType":"module"}